"use strict";
const cdk_1 = require("@aws-cdk/cdk");
const lib_1 = require("../lib");
class TestApp {
    constructor() {
        this.app = new cdk_1.App();
        // tslint:disable-next-line:member-ordering
        this.stack = new cdk_1.Stack(this.app, 'MyStack');
    }
    synthesizeTemplate() {
        return this.app.synthesizeStack(this.stack.name).template;
    }
}
module.exports = {
    'default properties': {
        'add an SNS trigger to repository'(test) {
            const app = new TestApp();
            const props = {
                repositoryName: 'MyRepository'
            };
            const snsArn = 'arn:aws:sns:*:123456789012:my_topic';
            new lib_1.Repository(app.stack, 'MyRepository', props).notify(snsArn);
            const template = app.synthesizeTemplate();
            test.deepEqual(template, {
                Resources: {
                    MyRepository4C4BD5FC: {
                        Type: "AWS::CodeCommit::Repository",
                        Properties: {
                            RepositoryName: "MyRepository",
                            Triggers: [
                                {
                                    Events: [
                                        "all"
                                    ],
                                    DestinationArn: "arn:aws:sns:*:123456789012:my_topic",
                                    Name: "MyStack/MyRepository/arn:aws:sns:*:123456789012:my_topic"
                                }
                            ]
                        }
                    }
                }
            });
            test.done();
        },
        'fails when triggers have duplicate names'(test) {
            const app = new TestApp();
            const props = { repositoryName: 'MyRepository' };
            const myRepository = new lib_1.Repository(app.stack, 'MyRepository', props)
                .notify('myTrigger');
            test.throws(() => myRepository.notify('myTrigger'));
            test.done();
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5jb2RlY29tbWl0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5jb2RlY29tbWl0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBMEM7QUFFMUMsZ0NBQXFEO0FBcURyRCxNQUFNLE9BQU87SUFBYjtRQUNtQixRQUFHLEdBQUcsSUFBSSxTQUFHLEVBQUUsQ0FBQztRQUNqQywyQ0FBMkM7UUFDM0IsVUFBSyxHQUFVLElBQUksV0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFLaEUsQ0FBQztJQUhRLGtCQUFrQjtRQUN2QixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDO0lBQzVELENBQUM7Q0FDRjtBQTNERCxpQkFBUztJQUNQLG9CQUFvQixFQUFFO1FBQ3BCLGtDQUFrQyxDQUFDLElBQVU7WUFDM0MsTUFBTSxHQUFHLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUUxQixNQUFNLEtBQUssR0FBb0I7Z0JBQzdCLGNBQWMsRUFBRyxjQUFjO2FBQ2hDLENBQUM7WUFFRixNQUFNLE1BQU0sR0FBRyxxQ0FBcUMsQ0FBQztZQUVyRCxJQUFJLGdCQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2hFLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1lBRTFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFO2dCQUN2QixTQUFTLEVBQUU7b0JBQ1Qsb0JBQW9CLEVBQUU7d0JBQ3BCLElBQUksRUFBRSw2QkFBNkI7d0JBQ25DLFVBQVUsRUFBRTs0QkFDWixjQUFjLEVBQUUsY0FBYzs0QkFDOUIsUUFBUSxFQUFFO2dDQUNSO29DQUNBLE1BQU0sRUFBRTt3Q0FDTixLQUFLO3FDQUNOO29DQUNELGNBQWMsRUFBRSxxQ0FBcUM7b0NBQ3JELElBQUksRUFBRSwwREFBMEQ7aUNBQy9EOzZCQUNGO3lCQUNBO3FCQUNGO2lCQUNBO2FBQ0osQ0FBQyxDQUFDO1lBRUgsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQztRQUVELDBDQUEwQyxDQUFDLElBQVU7WUFDbkQsTUFBTSxHQUFHLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUUxQixNQUFNLEtBQUssR0FBRyxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsQ0FBQztZQUNqRCxNQUFNLFlBQVksR0FBRyxJQUFJLGdCQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUUsS0FBSyxDQUFDO2lCQUNwRSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFFcEQsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQztLQUNGO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcCwgU3RhY2sgfSBmcm9tICdAYXdzLWNkay9jZGsnO1xuaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCB7IFJlcG9zaXRvcnksIFJlcG9zaXRvcnlQcm9wcyB9IGZyb20gJy4uL2xpYic7XG5cbmV4cG9ydCA9IHtcbiAgJ2RlZmF1bHQgcHJvcGVydGllcyc6IHtcbiAgICAnYWRkIGFuIFNOUyB0cmlnZ2VyIHRvIHJlcG9zaXRvcnknKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IGFwcCA9IG5ldyBUZXN0QXBwKCk7XG5cbiAgICAgIGNvbnN0IHByb3BzOiBSZXBvc2l0b3J5UHJvcHMgPSB7XG4gICAgICAgIHJlcG9zaXRvcnlOYW1lOiAgJ015UmVwb3NpdG9yeSdcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHNuc0FybiA9ICdhcm46YXdzOnNuczoqOjEyMzQ1Njc4OTAxMjpteV90b3BpYyc7XG5cbiAgICAgIG5ldyBSZXBvc2l0b3J5KGFwcC5zdGFjaywgJ015UmVwb3NpdG9yeScsIHByb3BzKS5ub3RpZnkoc25zQXJuKTtcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gYXBwLnN5bnRoZXNpemVUZW1wbGF0ZSgpO1xuXG4gICAgICB0ZXN0LmRlZXBFcXVhbCh0ZW1wbGF0ZSwge1xuICAgICAgICBSZXNvdXJjZXM6IHtcbiAgICAgICAgICBNeVJlcG9zaXRvcnk0QzRCRDVGQzoge1xuICAgICAgICAgICAgVHlwZTogXCJBV1M6OkNvZGVDb21taXQ6OlJlcG9zaXRvcnlcIixcbiAgICAgICAgICAgIFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIFJlcG9zaXRvcnlOYW1lOiBcIk15UmVwb3NpdG9yeVwiLFxuICAgICAgICAgICAgVHJpZ2dlcnM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICBFdmVudHM6IFtcbiAgICAgICAgICAgICAgICBcImFsbFwiXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIERlc3RpbmF0aW9uQXJuOiBcImFybjphd3M6c25zOio6MTIzNDU2Nzg5MDEyOm15X3RvcGljXCIsXG4gICAgICAgICAgICAgIE5hbWU6IFwiTXlTdGFjay9NeVJlcG9zaXRvcnkvYXJuOmF3czpzbnM6KjoxMjM0NTY3ODkwMTI6bXlfdG9waWNcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9LFxuXG4gICAgJ2ZhaWxzIHdoZW4gdHJpZ2dlcnMgaGF2ZSBkdXBsaWNhdGUgbmFtZXMnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IGFwcCA9IG5ldyBUZXN0QXBwKCk7XG5cbiAgICAgIGNvbnN0IHByb3BzID0geyByZXBvc2l0b3J5TmFtZTogJ015UmVwb3NpdG9yeScgfTtcbiAgICAgIGNvbnN0IG15UmVwb3NpdG9yeSA9IG5ldyBSZXBvc2l0b3J5KGFwcC5zdGFjaywgJ015UmVwb3NpdG9yeScsIHByb3BzKVxuICAgICAgLm5vdGlmeSgnbXlUcmlnZ2VyJyk7XG5cbiAgICAgIHRlc3QudGhyb3dzKCgpID0+IG15UmVwb3NpdG9yeS5ub3RpZnkoJ215VHJpZ2dlcicpKTtcblxuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfVxuICB9XG59O1xuXG5jbGFzcyBUZXN0QXBwIHtcbiAgcHJpdmF0ZSByZWFkb25seSBhcHAgPSBuZXcgQXBwKCk7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptZW1iZXItb3JkZXJpbmdcbiAgcHVibGljIHJlYWRvbmx5IHN0YWNrOiBTdGFjayA9IG5ldyBTdGFjayh0aGlzLmFwcCwgJ015U3RhY2snKTtcblxuICBwdWJsaWMgc3ludGhlc2l6ZVRlbXBsYXRlKCkge1xuICAgIHJldHVybiB0aGlzLmFwcC5zeW50aGVzaXplU3RhY2sodGhpcy5zdGFjay5uYW1lKS50ZW1wbGF0ZTtcbiAgfVxufVxuIl19