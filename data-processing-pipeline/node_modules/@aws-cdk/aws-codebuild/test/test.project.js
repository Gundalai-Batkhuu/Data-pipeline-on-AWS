"use strict";
const assert_1 = require("@aws-cdk/assert");
const assets = require("@aws-cdk/assets");
const cdk = require("@aws-cdk/cdk");
const codebuild = require("../lib");
module.exports = {
    'can use filename as buildspec'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: new codebuild.CodePipelineSource(),
            buildSpec: 'hello.yml',
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::Project', {
            Source: {
                BuildSpec: 'hello.yml'
            }
        }));
        test.done();
    },
    'can use buildspec literal'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: new codebuild.CodePipelineSource(),
            buildSpec: { phases: ['say hi'] }
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::Project', {
            Source: {
                BuildSpec: "{\n  \"phases\": [\n    \"say hi\"\n  ]\n}",
            }
        }));
        test.done();
    },
    'GitHub source': {
        'has reportBuildStatus on by default'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            new codebuild.Project(stack, 'Project', {
                source: new codebuild.GitHubSource({
                    owner: 'testowner',
                    repo: 'testrepo',
                    oauthToken: new cdk.Secret("test_oauth_token")
                })
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource('AWS::CodeBuild::Project', {
                Source: {
                    Type: "GITHUB",
                    Auth: {
                        Type: 'OAUTH',
                        Resource: 'test_oauth_token'
                    },
                    Location: 'https://github.com/testowner/testrepo.git',
                    ReportBuildStatus: true,
                }
            }));
            test.done();
        },
        'can explicitly set reportBuildStatus to false'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            new codebuild.Project(stack, 'Project', {
                source: new codebuild.GitHubSource({
                    owner: 'testowner',
                    repo: 'testrepo',
                    oauthToken: new cdk.Secret('test_oauth_token'),
                    reportBuildStatus: false,
                })
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::Project', {
                Source: {
                    ReportBuildStatus: false,
                },
            }));
            test.done();
        },
        'can explicitly set webhook to true'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            new codebuild.Project(stack, 'Project', {
                source: new codebuild.GitHubSource({
                    owner: 'testowner',
                    repo: 'testrepo',
                    oauthToken: new cdk.Secret('test_oauth_token'),
                    webhook: true,
                })
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::Project', {
                Triggers: {
                    Webhook: true,
                },
            }));
            test.done();
        },
    },
    'github enterprise auth test'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: new codebuild.GitHubEnterpriseSource({
                httpsCloneUrl: 'https://github.testcompany.com/testowner/testrepo',
                ignoreSslErrors: true,
                oauthToken: new cdk.Secret("test_oauth_token")
            })
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CodeBuild::Project', {
            Source: {
                Type: "GITHUB_ENTERPRISE",
                Auth: {
                    Type: 'OAUTH',
                    Resource: 'test_oauth_token'
                },
                InsecureSsl: true,
                Location: 'https://github.testcompany.com/testowner/testrepo'
            }
        }));
        test.done();
    },
    'bitbucket auth test'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: new codebuild.BitBucketSource({
                owner: 'testowner',
                repo: 'testrepo',
            })
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CodeBuild::Project', {
            Source: {
                Type: 'BITBUCKET',
                Location: 'https://bitbucket.org/testowner/testrepo.git',
            },
        }));
        test.done();
    },
    'construct from asset'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            buildScriptAsset: new assets.ZipDirectoryAsset(stack, 'Asset', { path: '.' }),
            buildScriptAssetEntrypoint: 'hello.sh',
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::Project', {
            Environment: {
                ComputeType: "BUILD_GENERAL1_SMALL",
                EnvironmentVariables: [
                    {
                        Name: "SCRIPT_S3_BUCKET",
                        Type: "PLAINTEXT",
                        Value: { Ref: "AssetS3Bucket235698C0" }
                    },
                    {
                        Name: "SCRIPT_S3_KEY",
                        Type: "PLAINTEXT",
                        Value: {
                            "Fn::Join": ["", [
                                    { "Fn::Select": [0, { "Fn::Split": ["||", { Ref: "AssetS3VersionKeyA852DDAE" }] }] },
                                    { "Fn::Select": [1, { "Fn::Split": ["||", { Ref: "AssetS3VersionKeyA852DDAE" }] }] }
                                ]]
                        }
                    }
                ],
            },
            Source: {
                // Not testing BuildSpec, it's too big and finicky
                Type: "NO_SOURCE"
            }
        }));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,