#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const codecommit = require("@aws-cdk/aws-codecommit");
const sns = require("@aws-cdk/aws-sns");
const sqs = require("@aws-cdk/aws-sqs");
const cdk = require("@aws-cdk/cdk");
const lib_1 = require("../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-codebuild-events');
const repo = new codecommit.Repository(stack, 'MyRepo', { repositoryName: 'aws-cdk-codebuild-events' });
const project = new lib_1.Project(stack, 'MyProject', {
    source: new lib_1.CodeCommitSource({ repository: repo }),
});
const queue = new sqs.Queue(stack, 'MyQueue');
const topic = new sns.Topic(stack, 'MyTopic');
topic.subscribeQueue(queue);
// this will send an email with the JSON event for every state change of this
// build project.
project.onStateChange('StateChange', topic);
// this will send an email with the message "Build phase changed to <phase>".
// The phase will be extracted from the "completed-phase" field of the event
// details.
project.onPhaseChange('PhaseChange').addTarget(topic, {
    textTemplate: `Build phase changed to <phase>`,
    pathsMap: {
        phase: '$.detail.completed-phase'
    }
});
// trigger a build when a commit is pushed to the repo
const onCommitRule = repo.onCommit('OnCommit', project, 'master');
onCommitRule.addTarget(topic, {
    textTemplate: 'A commit was pushed to the repository <repo> on branch <branch>',
    pathsMap: {
        branch: '$.detail.referenceName',
        repo: '$.detail.repositoryName'
    }
});
app.run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucHJvamVjdC1ldmVudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5wcm9qZWN0LWV2ZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxzREFBdUQ7QUFDdkQsd0NBQXlDO0FBQ3pDLHdDQUF5QztBQUN6QyxvQ0FBcUM7QUFDckMsZ0NBQW1EO0FBRW5ELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztBQUU3RCxNQUFNLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFLGNBQWMsRUFBRSwwQkFBMEIsRUFBRSxDQUFDLENBQUM7QUFDeEcsTUFBTSxPQUFPLEdBQUcsSUFBSSxhQUFPLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRTtJQUM5QyxNQUFNLEVBQUUsSUFBSSxzQkFBZ0IsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQztDQUNuRCxDQUFDLENBQUM7QUFFSCxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBRTlDLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDOUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUU1Qiw2RUFBNkU7QUFDN0UsaUJBQWlCO0FBQ2pCLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBRTVDLDZFQUE2RTtBQUM3RSw0RUFBNEU7QUFDNUUsV0FBVztBQUNYLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRTtJQUNwRCxZQUFZLEVBQUUsZ0NBQWdDO0lBQzlDLFFBQVEsRUFBRTtRQUNSLEtBQUssRUFBRSwwQkFBMEI7S0FDbEM7Q0FDRixDQUFDLENBQUM7QUFFSCxzREFBc0Q7QUFDdEQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ2xFLFlBQVksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFO0lBQzVCLFlBQVksRUFBRSxpRUFBaUU7SUFDL0UsUUFBUSxFQUFFO1FBQ1IsTUFBTSxFQUFFLHdCQUF3QjtRQUNoQyxJQUFJLEVBQUUseUJBQXlCO0tBQ2hDO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0IGNvZGVjb21taXQgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtY29kZWNvbW1pdCcpO1xuaW1wb3J0IHNucyA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1zbnMnKTtcbmltcG9ydCBzcXMgPSByZXF1aXJlKCdAYXdzLWNkay9hd3Mtc3FzJyk7XG5pbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY2RrJyk7XG5pbXBvcnQgeyBDb2RlQ29tbWl0U291cmNlLCBQcm9qZWN0IH0gZnJvbSAnLi4vbGliJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2F3cy1jZGstY29kZWJ1aWxkLWV2ZW50cycpO1xuXG5jb25zdCByZXBvID0gbmV3IGNvZGVjb21taXQuUmVwb3NpdG9yeShzdGFjaywgJ015UmVwbycsIHsgcmVwb3NpdG9yeU5hbWU6ICdhd3MtY2RrLWNvZGVidWlsZC1ldmVudHMnIH0pO1xuY29uc3QgcHJvamVjdCA9IG5ldyBQcm9qZWN0KHN0YWNrLCAnTXlQcm9qZWN0Jywge1xuICBzb3VyY2U6IG5ldyBDb2RlQ29tbWl0U291cmNlKHsgcmVwb3NpdG9yeTogcmVwbyB9KSxcbn0pO1xuXG5jb25zdCBxdWV1ZSA9IG5ldyBzcXMuUXVldWUoc3RhY2ssICdNeVF1ZXVlJyk7XG5cbmNvbnN0IHRvcGljID0gbmV3IHNucy5Ub3BpYyhzdGFjaywgJ015VG9waWMnKTtcbnRvcGljLnN1YnNjcmliZVF1ZXVlKHF1ZXVlKTtcblxuLy8gdGhpcyB3aWxsIHNlbmQgYW4gZW1haWwgd2l0aCB0aGUgSlNPTiBldmVudCBmb3IgZXZlcnkgc3RhdGUgY2hhbmdlIG9mIHRoaXNcbi8vIGJ1aWxkIHByb2plY3QuXG5wcm9qZWN0Lm9uU3RhdGVDaGFuZ2UoJ1N0YXRlQ2hhbmdlJywgdG9waWMpO1xuXG4vLyB0aGlzIHdpbGwgc2VuZCBhbiBlbWFpbCB3aXRoIHRoZSBtZXNzYWdlIFwiQnVpbGQgcGhhc2UgY2hhbmdlZCB0byA8cGhhc2U+XCIuXG4vLyBUaGUgcGhhc2Ugd2lsbCBiZSBleHRyYWN0ZWQgZnJvbSB0aGUgXCJjb21wbGV0ZWQtcGhhc2VcIiBmaWVsZCBvZiB0aGUgZXZlbnRcbi8vIGRldGFpbHMuXG5wcm9qZWN0Lm9uUGhhc2VDaGFuZ2UoJ1BoYXNlQ2hhbmdlJykuYWRkVGFyZ2V0KHRvcGljLCB7XG4gIHRleHRUZW1wbGF0ZTogYEJ1aWxkIHBoYXNlIGNoYW5nZWQgdG8gPHBoYXNlPmAsXG4gIHBhdGhzTWFwOiB7XG4gICAgcGhhc2U6ICckLmRldGFpbC5jb21wbGV0ZWQtcGhhc2UnXG4gIH1cbn0pO1xuXG4vLyB0cmlnZ2VyIGEgYnVpbGQgd2hlbiBhIGNvbW1pdCBpcyBwdXNoZWQgdG8gdGhlIHJlcG9cbmNvbnN0IG9uQ29tbWl0UnVsZSA9IHJlcG8ub25Db21taXQoJ09uQ29tbWl0JywgcHJvamVjdCwgJ21hc3RlcicpO1xub25Db21taXRSdWxlLmFkZFRhcmdldCh0b3BpYywge1xuICB0ZXh0VGVtcGxhdGU6ICdBIGNvbW1pdCB3YXMgcHVzaGVkIHRvIHRoZSByZXBvc2l0b3J5IDxyZXBvPiBvbiBicmFuY2ggPGJyYW5jaD4nLFxuICBwYXRoc01hcDoge1xuICAgIGJyYW5jaDogJyQuZGV0YWlsLnJlZmVyZW5jZU5hbWUnLFxuICAgIHJlcG86ICckLmRldGFpbC5yZXBvc2l0b3J5TmFtZSdcbiAgfVxufSk7XG5cbmFwcC5ydW4oKTtcbiJdfQ==