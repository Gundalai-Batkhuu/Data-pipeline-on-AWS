import { Test } from 'nodeunit';
declare const _default: {
    'default properties': {
        'with CodePipeline source'(test: Test): void;
        'with CodeCommit source'(test: Test): void;
        'with S3Bucket source'(test: Test): void;
        'fail creating a Project when no build spec is given'(test: Test): void;
    };
    'using timeout and path in S3 artifacts sets it correctly'(test: Test): void;
    'secondary sources': {
        'require providing an identifier when creating a Project'(test: Test): void;
        'are not allowed for a Project with CodePipeline as Source'(test: Test): void;
        'added with an identifer after the Project has been created are rendered in the template'(test: Test): void;
    };
    'secondary artifacts': {
        'require providing an identifier when creating a Project'(test: Test): void;
        'are not allowed for a Project with CodePipeline as Source'(test: Test): void;
        'added with an identifier after the Project has been created are rendered in the template'(test: Test): void;
    };
    'artifacts': {
        'CodePipeline': {
            'both source and artifacs are set to CodePipeline'(test: Test): void;
            'if sourcde is set to CodePipeline, and artifacts are not set, they are defaulted to CodePipeline'(test: Test): void;
            'fails if one of source/artifacts is set to CodePipeline and the other isn\'t'(test: Test): void;
        };
    };
    'events'(test: Test): void;
    'environment variables can be overridden at the project level'(test: Test): void;
    '.metricXxx() methods can be used to obtain Metrics for CodeBuild projects'(test: Test): void;
    'using ComputeType.Small with a Windows image fails validation'(test: Test): void;
};
export = _default;
