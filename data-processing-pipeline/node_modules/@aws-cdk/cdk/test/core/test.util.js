"use strict";
const lib_1 = require("../../lib");
const util_1 = require("../../lib/core/util");
class SomeToken {
    constructor() {
        this.foo = 60;
        this.goo = 40;
    }
    resolve() {
        return this.foo + this.goo;
    }
}
module.exports = {
    'capitalizeResourceProperties capitalizes all keys of an object (recursively) from camelCase to PascalCase'(test) {
        const c = new lib_1.Root();
        test.equal(util_1.capitalizePropertyNames(c, undefined), undefined);
        test.equal(util_1.capitalizePropertyNames(c, 12), 12);
        test.equal(util_1.capitalizePropertyNames(c, 'hello'), 'hello');
        test.deepEqual(util_1.capitalizePropertyNames(c, ['hello', 88]), ['hello', 88]);
        test.deepEqual(util_1.capitalizePropertyNames(c, { Hello: 'world', hey: 'dude' }), { Hello: 'world', Hey: 'dude' });
        test.deepEqual(util_1.capitalizePropertyNames(c, [1, 2, { three: 3 }]), [1, 2, { Three: 3 }]);
        test.deepEqual(util_1.capitalizePropertyNames(c, { Hello: 'world', recursive: { foo: 123, there: { another: ['hello', { world: 123 }] } } }), { Hello: 'world', Recursive: { Foo: 123, There: { Another: ['hello', { World: 123 }] } } });
        // make sure tokens are resolved and result is also capitalized
        test.deepEqual(util_1.capitalizePropertyNames(c, { hello: { resolve: () => ({ foo: 'bar' }) }, world: new SomeToken() }), { Hello: { Foo: 'bar' }, World: 100 });
        test.done();
    },
    'ignoreEmpty': {
        '[]'(test) {
            const c = new lib_1.Root();
            test.strictEqual(util_1.ignoreEmpty(c, []), undefined);
            test.done();
        },
        '{}'(test) {
            const c = new lib_1.Root();
            test.strictEqual(util_1.ignoreEmpty(c, {}), undefined);
            test.done();
        },
        'undefined/null'(test) {
            const c = new lib_1.Root();
            test.strictEqual(util_1.ignoreEmpty(c, undefined), undefined);
            test.strictEqual(util_1.ignoreEmpty(c, null), null);
            test.done();
        },
        'primitives'(test) {
            const c = new lib_1.Root();
            test.strictEqual(util_1.ignoreEmpty(c, 12), 12);
            test.strictEqual(util_1.ignoreEmpty(c, "12"), "12");
            test.done();
        },
        'non-empty arrays/objects'(test) {
            const c = new lib_1.Root();
            test.deepEqual(util_1.ignoreEmpty(c, [1, 2, 3, undefined]), [1, 2, 3]); // undefined array values is cleaned up by "resolve"
            test.deepEqual(util_1.ignoreEmpty(c, { o: 1, b: 2, j: 3 }), { o: 1, b: 2, j: 3 });
            test.done();
        },
        'resolve first'(test) {
            const c = new lib_1.Root();
            test.deepEqual(util_1.ignoreEmpty(c, { xoo: { resolve: () => 123 } }), { xoo: 123 });
            test.strictEqual(util_1.ignoreEmpty(c, { xoo: { resolve: () => undefined } }), undefined);
            test.deepEqual(util_1.ignoreEmpty(c, { xoo: { resolve: () => [] } }), { xoo: [] });
            test.deepEqual(util_1.ignoreEmpty(c, { xoo: { resolve: () => [undefined, undefined] } }), { xoo: [] });
            test.done();
        }
    }
};
//# sourceMappingURL=data:application/json;base64,