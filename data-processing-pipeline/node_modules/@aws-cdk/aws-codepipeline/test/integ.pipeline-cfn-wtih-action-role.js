"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cloudformation = require("@aws-cdk/aws-cloudformation");
const iam = require("@aws-cdk/aws-iam");
const s3 = require("@aws-cdk/aws-s3");
const cdk = require("@aws-cdk/cdk");
const codepipeline = require("../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-codepipeline-cloudformation-cross-region-with-action-role', {});
const bucket = new s3.Bucket(stack, 'MyBucket', {
    versioned: true,
    removalPolicy: cdk.RemovalPolicy.Destroy,
});
const pipeline = new codepipeline.Pipeline(stack, 'MyPipeline', {
    artifactBucket: bucket,
});
const sourceStage = pipeline.addStage('Source');
const sourceAction = bucket.addToPipeline(sourceStage, 'S3', {
    bucketKey: 'some/path',
});
const cfnStage = pipeline.addStage('CFN');
const role = new iam.Role(stack, 'ActionRole', {
    assumedBy: new iam.AccountPrincipal(new cdk.Aws().accountId)
});
role.addToPolicy(new iam.PolicyStatement()
    .addAction('sqs:*')
    .addAllResources());
new cloudformation.PipelineCreateUpdateStackAction(stack, 'CFN_Deploy', {
    stage: cfnStage,
    stackName: 'aws-cdk-codepipeline-cross-region-deploy-stack',
    templatePath: sourceAction.outputArtifact.atPath('template.yml'),
    adminPermissions: false,
    role
});
pipeline.addToRolePolicy(new iam.PolicyStatement()
    .addActions("sts:AssumeRole", "iam:PassRole")
    .addAllResources());
app.run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucGlwZWxpbmUtY2ZuLXd0aWgtYWN0aW9uLXJvbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5waXBlbGluZS1jZm4td3RpaC1hY3Rpb24tcm9sZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhEQUErRDtBQUMvRCx3Q0FBeUM7QUFDekMsc0NBQXVDO0FBQ3ZDLG9DQUFxQztBQUNyQyx1Q0FBd0M7QUFFeEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxtRUFBbUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUUxRyxNQUFNLE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRTtJQUM5QyxTQUFTLEVBQUUsSUFBSTtJQUNmLGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU87Q0FDekMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxRQUFRLEdBQUcsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUU7SUFDOUQsY0FBYyxFQUFFLE1BQU07Q0FDdkIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNoRCxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUU7SUFDM0QsU0FBUyxFQUFFLFdBQVc7Q0FDdkIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUUxQyxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtJQUM3QyxTQUFTLEVBQUUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDO0NBQzdELENBQUMsQ0FBQztBQUNILElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFO0tBQ3ZDLFNBQVMsQ0FBQyxPQUFPLENBQUM7S0FDbEIsZUFBZSxFQUFFLENBQ25CLENBQUM7QUFFRixJQUFJLGNBQWMsQ0FBQywrQkFBK0IsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFO0lBQ3RFLEtBQUssRUFBRSxRQUFRO0lBQ2YsU0FBUyxFQUFFLGdEQUFnRDtJQUMzRCxZQUFZLEVBQUUsWUFBWSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDO0lBQ2hFLGdCQUFnQixFQUFFLEtBQUs7SUFDdkIsSUFBSTtDQUNMLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFO0tBQy9DLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxjQUFjLENBQUM7S0FDNUMsZUFBZSxFQUFFLENBQ25CLENBQUM7QUFFRixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xvdWRmb3JtYXRpb24gPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtY2xvdWRmb3JtYXRpb24nKTtcbmltcG9ydCBpYW0gPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtaWFtJyk7XG5pbXBvcnQgczMgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtczMnKTtcbmltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcbmltcG9ydCBjb2RlcGlwZWxpbmUgPSByZXF1aXJlKCcuLi9saWInKTtcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2F3cy1jZGstY29kZXBpcGVsaW5lLWNsb3VkZm9ybWF0aW9uLWNyb3NzLXJlZ2lvbi13aXRoLWFjdGlvbi1yb2xlJywge30pO1xuXG5jb25zdCBidWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnTXlCdWNrZXQnLCB7XG4gIHZlcnNpb25lZDogdHJ1ZSxcbiAgcmVtb3ZhbFBvbGljeTogY2RrLlJlbW92YWxQb2xpY3kuRGVzdHJveSxcbn0pO1xuXG5jb25zdCBwaXBlbGluZSA9IG5ldyBjb2RlcGlwZWxpbmUuUGlwZWxpbmUoc3RhY2ssICdNeVBpcGVsaW5lJywge1xuICBhcnRpZmFjdEJ1Y2tldDogYnVja2V0LFxufSk7XG5cbmNvbnN0IHNvdXJjZVN0YWdlID0gcGlwZWxpbmUuYWRkU3RhZ2UoJ1NvdXJjZScpO1xuY29uc3Qgc291cmNlQWN0aW9uID0gYnVja2V0LmFkZFRvUGlwZWxpbmUoc291cmNlU3RhZ2UsICdTMycsIHtcbiAgYnVja2V0S2V5OiAnc29tZS9wYXRoJyxcbn0pO1xuXG5jb25zdCBjZm5TdGFnZSA9IHBpcGVsaW5lLmFkZFN0YWdlKCdDRk4nKTtcblxuY29uc3Qgcm9sZSA9IG5ldyBpYW0uUm9sZShzdGFjaywgJ0FjdGlvblJvbGUnLCB7XG4gIGFzc3VtZWRCeTogbmV3IGlhbS5BY2NvdW50UHJpbmNpcGFsKG5ldyBjZGsuQXdzKCkuYWNjb3VudElkKVxufSk7XG5yb2xlLmFkZFRvUG9saWN5KG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KClcbiAgLmFkZEFjdGlvbignc3FzOionKVxuICAuYWRkQWxsUmVzb3VyY2VzKClcbik7XG5cbm5ldyBjbG91ZGZvcm1hdGlvbi5QaXBlbGluZUNyZWF0ZVVwZGF0ZVN0YWNrQWN0aW9uKHN0YWNrLCAnQ0ZOX0RlcGxveScsIHtcbiAgc3RhZ2U6IGNmblN0YWdlLFxuICBzdGFja05hbWU6ICdhd3MtY2RrLWNvZGVwaXBlbGluZS1jcm9zcy1yZWdpb24tZGVwbG95LXN0YWNrJyxcbiAgdGVtcGxhdGVQYXRoOiBzb3VyY2VBY3Rpb24ub3V0cHV0QXJ0aWZhY3QuYXRQYXRoKCd0ZW1wbGF0ZS55bWwnKSxcbiAgYWRtaW5QZXJtaXNzaW9uczogZmFsc2UsXG4gIHJvbGVcbn0pO1xuXG5waXBlbGluZS5hZGRUb1JvbGVQb2xpY3kobmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoKVxuICAuYWRkQWN0aW9ucyhcInN0czpBc3N1bWVSb2xlXCIsIFwiaWFtOlBhc3NSb2xlXCIpXG4gIC5hZGRBbGxSZXNvdXJjZXMoKVxuKTtcblxuYXBwLnJ1bigpO1xuIl19