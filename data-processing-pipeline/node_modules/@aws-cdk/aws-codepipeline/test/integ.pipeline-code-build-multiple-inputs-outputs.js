"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const codebuild = require("@aws-cdk/aws-codebuild");
const codecommit = require("@aws-cdk/aws-codecommit");
const s3 = require("@aws-cdk/aws-s3");
const cdk = require("@aws-cdk/cdk");
const codepipeline = require("../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-codepipeline-codebuild-multiple-inputs-outputs');
const repository = new codecommit.Repository(stack, 'MyRepo', {
    repositoryName: 'MyIntegTestTempRepo',
});
const bucket = new s3.Bucket(stack, 'MyBucket', {
    versioned: true,
    removalPolicy: cdk.RemovalPolicy.Destroy,
});
const pipeline = new codepipeline.Pipeline(stack, 'Pipeline', {
    artifactBucket: bucket,
});
const sourceStage = pipeline.addStage('Source');
const sourceAction1 = repository.addToPipeline(sourceStage, 'Source1');
const sourceAction2 = bucket.addToPipeline(sourceStage, 'Source2', {
    bucketKey: 'some/path',
});
const project = new codebuild.PipelineProject(stack, 'MyBuildProject');
const buildStage = pipeline.addStage('Build');
const buildAction = project.addToPipeline(buildStage, 'Build1', {
    inputArtifact: sourceAction1.outputArtifact,
    additionalInputArtifacts: [
        sourceAction2.outputArtifact,
    ],
    additionalOutputArtifactNames: [
        'CustomOutput1',
    ],
});
const testAction = project.addToPipelineAsTest(buildStage, 'Build2', {
    inputArtifact: sourceAction2.outputArtifact,
    additionalInputArtifacts: [
        sourceAction1.outputArtifact,
    ],
    additionalOutputArtifactNames: [
        'CustomOutput2',
    ],
});
// some assertions on the Action helper methods
if (buildAction.additionalOutputArtifacts().length !== 1) {
    throw new Error(`Expected build Action to have 1 additional output artifact, but was: ${buildAction.additionalOutputArtifacts()}`);
}
buildAction.additionalOutputArtifact('CustomOutput1'); // that it doesn't throw
if (testAction.outputArtifact) {
    throw new Error(`Expected test Action output Artifact to be undefined, was: ${testAction.outputArtifact}`);
}
if (testAction.additionalOutputArtifacts().length !== 1) {
    throw new Error(`Expected test Action to have 1 additional output artifact, but was: ${testAction.additionalOutputArtifacts()}`);
}
testAction.additionalOutputArtifact('CustomOutput2'); // that it doesn't throw
app.run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucGlwZWxpbmUtY29kZS1idWlsZC1tdWx0aXBsZS1pbnB1dHMtb3V0cHV0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLnBpcGVsaW5lLWNvZGUtYnVpbGQtbXVsdGlwbGUtaW5wdXRzLW91dHB1dHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvREFBcUQ7QUFDckQsc0RBQXVEO0FBQ3ZELHNDQUF1QztBQUN2QyxvQ0FBcUM7QUFDckMsdUNBQXdDO0FBRXhDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsd0RBQXdELENBQUMsQ0FBQztBQUUzRixNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtJQUM1RCxjQUFjLEVBQUUscUJBQXFCO0NBQ3RDLENBQUMsQ0FBQztBQUNILE1BQU0sTUFBTSxHQUFHLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFO0lBQzlDLFNBQVMsRUFBRSxJQUFJO0lBQ2YsYUFBYSxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTztDQUN6QyxDQUFDLENBQUM7QUFFSCxNQUFNLFFBQVEsR0FBRyxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRTtJQUM1RCxjQUFjLEVBQUUsTUFBTTtDQUN2QixDQUFDLENBQUM7QUFFSCxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2hELE1BQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3ZFLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRTtJQUNqRSxTQUFTLEVBQUUsV0FBVztDQUN2QixDQUFDLENBQUM7QUFFSCxNQUFNLE9BQU8sR0FBRyxJQUFJLFNBQVMsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFDdkUsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM5QyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDOUQsYUFBYSxFQUFFLGFBQWEsQ0FBQyxjQUFjO0lBQzNDLHdCQUF3QixFQUFFO1FBQ3hCLGFBQWEsQ0FBQyxjQUFjO0tBQzdCO0lBQ0QsNkJBQTZCLEVBQUU7UUFDN0IsZUFBZTtLQUNoQjtDQUNGLENBQUMsQ0FBQztBQUNILE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ25FLGFBQWEsRUFBRSxhQUFhLENBQUMsY0FBYztJQUMzQyx3QkFBd0IsRUFBRTtRQUN4QixhQUFhLENBQUMsY0FBYztLQUM3QjtJQUNELDZCQUE2QixFQUFFO1FBQzdCLGVBQWU7S0FDaEI7Q0FDRixDQUFDLENBQUM7QUFFSCwrQ0FBK0M7QUFDL0MsSUFBSSxXQUFXLENBQUMseUJBQXlCLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0lBQ3hELE1BQU0sSUFBSSxLQUFLLENBQUMsd0VBQXdFLFdBQVcsQ0FBQyx5QkFBeUIsRUFBRSxFQUFFLENBQUMsQ0FBQztDQUNwSTtBQUNELFdBQVcsQ0FBQyx3QkFBd0IsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLHdCQUF3QjtBQUUvRSxJQUFJLFVBQVUsQ0FBQyxjQUFjLEVBQUU7SUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyw4REFBOEQsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDNUc7QUFDRCxJQUFJLFVBQVUsQ0FBQyx5QkFBeUIsRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7SUFDdkQsTUFBTSxJQUFJLEtBQUssQ0FBQyx1RUFBdUUsVUFBVSxDQUFDLHlCQUF5QixFQUFFLEVBQUUsQ0FBQyxDQUFDO0NBQ2xJO0FBQ0QsVUFBVSxDQUFDLHdCQUF3QixDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsd0JBQXdCO0FBRTlFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb2RlYnVpbGQgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtY29kZWJ1aWxkJyk7XG5pbXBvcnQgY29kZWNvbW1pdCA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1jb2RlY29tbWl0Jyk7XG5pbXBvcnQgczMgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtczMnKTtcbmltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcbmltcG9ydCBjb2RlcGlwZWxpbmUgPSByZXF1aXJlKCcuLi9saWInKTtcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2F3cy1jZGstY29kZXBpcGVsaW5lLWNvZGVidWlsZC1tdWx0aXBsZS1pbnB1dHMtb3V0cHV0cycpO1xuXG5jb25zdCByZXBvc2l0b3J5ID0gbmV3IGNvZGVjb21taXQuUmVwb3NpdG9yeShzdGFjaywgJ015UmVwbycsIHtcbiAgcmVwb3NpdG9yeU5hbWU6ICdNeUludGVnVGVzdFRlbXBSZXBvJyxcbn0pO1xuY29uc3QgYnVja2V0ID0gbmV3IHMzLkJ1Y2tldChzdGFjaywgJ015QnVja2V0Jywge1xuICB2ZXJzaW9uZWQ6IHRydWUsXG4gIHJlbW92YWxQb2xpY3k6IGNkay5SZW1vdmFsUG9saWN5LkRlc3Ryb3ksXG59KTtcblxuY29uc3QgcGlwZWxpbmUgPSBuZXcgY29kZXBpcGVsaW5lLlBpcGVsaW5lKHN0YWNrLCAnUGlwZWxpbmUnLCB7XG4gIGFydGlmYWN0QnVja2V0OiBidWNrZXQsXG59KTtcblxuY29uc3Qgc291cmNlU3RhZ2UgPSBwaXBlbGluZS5hZGRTdGFnZSgnU291cmNlJyk7XG5jb25zdCBzb3VyY2VBY3Rpb24xID0gcmVwb3NpdG9yeS5hZGRUb1BpcGVsaW5lKHNvdXJjZVN0YWdlLCAnU291cmNlMScpO1xuY29uc3Qgc291cmNlQWN0aW9uMiA9IGJ1Y2tldC5hZGRUb1BpcGVsaW5lKHNvdXJjZVN0YWdlLCAnU291cmNlMicsIHtcbiAgYnVja2V0S2V5OiAnc29tZS9wYXRoJyxcbn0pO1xuXG5jb25zdCBwcm9qZWN0ID0gbmV3IGNvZGVidWlsZC5QaXBlbGluZVByb2plY3Qoc3RhY2ssICdNeUJ1aWxkUHJvamVjdCcpO1xuY29uc3QgYnVpbGRTdGFnZSA9IHBpcGVsaW5lLmFkZFN0YWdlKCdCdWlsZCcpO1xuY29uc3QgYnVpbGRBY3Rpb24gPSBwcm9qZWN0LmFkZFRvUGlwZWxpbmUoYnVpbGRTdGFnZSwgJ0J1aWxkMScsIHtcbiAgaW5wdXRBcnRpZmFjdDogc291cmNlQWN0aW9uMS5vdXRwdXRBcnRpZmFjdCxcbiAgYWRkaXRpb25hbElucHV0QXJ0aWZhY3RzOiBbXG4gICAgc291cmNlQWN0aW9uMi5vdXRwdXRBcnRpZmFjdCxcbiAgXSxcbiAgYWRkaXRpb25hbE91dHB1dEFydGlmYWN0TmFtZXM6IFtcbiAgICAnQ3VzdG9tT3V0cHV0MScsXG4gIF0sXG59KTtcbmNvbnN0IHRlc3RBY3Rpb24gPSBwcm9qZWN0LmFkZFRvUGlwZWxpbmVBc1Rlc3QoYnVpbGRTdGFnZSwgJ0J1aWxkMicsIHtcbiAgaW5wdXRBcnRpZmFjdDogc291cmNlQWN0aW9uMi5vdXRwdXRBcnRpZmFjdCxcbiAgYWRkaXRpb25hbElucHV0QXJ0aWZhY3RzOiBbXG4gICAgc291cmNlQWN0aW9uMS5vdXRwdXRBcnRpZmFjdCxcbiAgXSxcbiAgYWRkaXRpb25hbE91dHB1dEFydGlmYWN0TmFtZXM6IFtcbiAgICAnQ3VzdG9tT3V0cHV0MicsXG4gIF0sXG59KTtcblxuLy8gc29tZSBhc3NlcnRpb25zIG9uIHRoZSBBY3Rpb24gaGVscGVyIG1ldGhvZHNcbmlmIChidWlsZEFjdGlvbi5hZGRpdGlvbmFsT3V0cHV0QXJ0aWZhY3RzKCkubGVuZ3RoICE9PSAxKSB7XG4gIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYnVpbGQgQWN0aW9uIHRvIGhhdmUgMSBhZGRpdGlvbmFsIG91dHB1dCBhcnRpZmFjdCwgYnV0IHdhczogJHtidWlsZEFjdGlvbi5hZGRpdGlvbmFsT3V0cHV0QXJ0aWZhY3RzKCl9YCk7XG59XG5idWlsZEFjdGlvbi5hZGRpdGlvbmFsT3V0cHV0QXJ0aWZhY3QoJ0N1c3RvbU91dHB1dDEnKTsgLy8gdGhhdCBpdCBkb2Vzbid0IHRocm93XG5cbmlmICh0ZXN0QWN0aW9uLm91dHB1dEFydGlmYWN0KSB7XG4gIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgdGVzdCBBY3Rpb24gb3V0cHV0IEFydGlmYWN0IHRvIGJlIHVuZGVmaW5lZCwgd2FzOiAke3Rlc3RBY3Rpb24ub3V0cHV0QXJ0aWZhY3R9YCk7XG59XG5pZiAodGVzdEFjdGlvbi5hZGRpdGlvbmFsT3V0cHV0QXJ0aWZhY3RzKCkubGVuZ3RoICE9PSAxKSB7XG4gIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgdGVzdCBBY3Rpb24gdG8gaGF2ZSAxIGFkZGl0aW9uYWwgb3V0cHV0IGFydGlmYWN0LCBidXQgd2FzOiAke3Rlc3RBY3Rpb24uYWRkaXRpb25hbE91dHB1dEFydGlmYWN0cygpfWApO1xufVxudGVzdEFjdGlvbi5hZGRpdGlvbmFsT3V0cHV0QXJ0aWZhY3QoJ0N1c3RvbU91dHB1dDInKTsgLy8gdGhhdCBpdCBkb2Vzbid0IHRocm93XG5cbmFwcC5ydW4oKTtcbiJdfQ==