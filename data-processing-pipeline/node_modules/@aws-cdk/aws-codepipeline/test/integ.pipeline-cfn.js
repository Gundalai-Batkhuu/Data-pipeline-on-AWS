"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cfn = require("@aws-cdk/aws-cloudformation");
const aws_iam_1 = require("@aws-cdk/aws-iam");
const aws_iam_2 = require("@aws-cdk/aws-iam");
const s3 = require("@aws-cdk/aws-s3");
const cdk = require("@aws-cdk/cdk");
const codepipeline = require("../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-codepipeline-cloudformation');
const pipeline = new codepipeline.Pipeline(stack, 'Pipeline');
const sourceStage = new codepipeline.Stage(pipeline, 'Source', { pipeline });
const bucket = new s3.Bucket(stack, 'PipelineBucket', {
    versioned: true,
    removalPolicy: cdk.RemovalPolicy.Destroy,
});
const source = new s3.PipelineSourceAction(stack, 'Source', {
    stage: sourceStage,
    outputArtifactName: 'SourceArtifact',
    bucket,
    bucketKey: 'key',
});
const cfnStage = new codepipeline.Stage(stack, 'CFN', { pipeline });
const changeSetName = "ChangeSetIntegTest";
const stackName = "IntegTest-TestActionStack";
const role = new aws_iam_1.Role(stack, 'CfnChangeSetRole', {
    assumedBy: new aws_iam_2.ServicePrincipal('cloudformation.amazonaws.com'),
});
new cfn.PipelineCreateReplaceChangeSetAction(stack, 'DeployCFN', {
    stage: cfnStage,
    changeSetName,
    stackName,
    deploymentRole: role,
    templatePath: source.outputArtifact.atPath('test.yaml'),
    adminPermissions: false,
    parameterOverrides: {
        BucketName: source.outputArtifact.bucketName,
        ObjectKey: source.outputArtifact.objectKey,
        Url: source.outputArtifact.url,
        OtherParam: source.outputArtifact.getParam('params.json', 'OtherParam'),
    },
});
app.run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucGlwZWxpbmUtY2ZuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcucGlwZWxpbmUtY2ZuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbURBQW9EO0FBQ3BELDhDQUF3QztBQUN4Qyw4Q0FBb0Q7QUFDcEQsc0NBQXVDO0FBQ3ZDLG9DQUFxQztBQUNyQyx1Q0FBd0M7QUFFeEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxxQ0FBcUMsQ0FBQyxDQUFDO0FBRXhFLE1BQU0sUUFBUSxHQUFHLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFFOUQsTUFBTSxXQUFXLEdBQUcsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQzdFLE1BQU0sTUFBTSxHQUFHLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUU7SUFDcEQsU0FBUyxFQUFFLElBQUk7SUFDZixhQUFhLEVBQUUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPO0NBQ3pDLENBQUMsQ0FBQztBQUNILE1BQU0sTUFBTSxHQUFHLElBQUksRUFBRSxDQUFDLG9CQUFvQixDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUU7SUFDMUQsS0FBSyxFQUFFLFdBQVc7SUFDbEIsa0JBQWtCLEVBQUUsZ0JBQWdCO0lBQ3BDLE1BQU07SUFDTixTQUFTLEVBQUUsS0FBSztDQUNqQixDQUFDLENBQUM7QUFFSCxNQUFNLFFBQVEsR0FBRyxJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFFcEUsTUFBTSxhQUFhLEdBQUcsb0JBQW9CLENBQUM7QUFDM0MsTUFBTSxTQUFTLEdBQUcsMkJBQTJCLENBQUM7QUFFOUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxjQUFJLENBQUMsS0FBSyxFQUFFLGtCQUFrQixFQUFFO0lBQy9DLFNBQVMsRUFBRSxJQUFJLDBCQUFnQixDQUFDLDhCQUE4QixDQUFDO0NBQ2hFLENBQUMsQ0FBQztBQUVILElBQUksR0FBRyxDQUFDLG9DQUFvQyxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUU7SUFDL0QsS0FBSyxFQUFFLFFBQVE7SUFDZixhQUFhO0lBQ2IsU0FBUztJQUNULGNBQWMsRUFBRSxJQUFJO0lBQ3BCLFlBQVksRUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7SUFDdkQsZ0JBQWdCLEVBQUUsS0FBSztJQUN2QixrQkFBa0IsRUFBRTtRQUNsQixVQUFVLEVBQUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVO1FBQzVDLFNBQVMsRUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVM7UUFDMUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRztRQUM5QixVQUFVLEVBQUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQztLQUN4RTtDQUNGLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjZm4gPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtY2xvdWRmb3JtYXRpb24nKTtcbmltcG9ydCB7IFJvbGUgfSBmcm9tICdAYXdzLWNkay9hd3MtaWFtJztcbmltcG9ydCB7IFNlcnZpY2VQcmluY2lwYWwgfSBmcm9tICdAYXdzLWNkay9hd3MtaWFtJztcbmltcG9ydCBzMyA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1zMycpO1xuaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NkaycpO1xuaW1wb3J0IGNvZGVwaXBlbGluZSA9IHJlcXVpcmUoJy4uL2xpYicpO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG5jb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnYXdzLWNkay1jb2RlcGlwZWxpbmUtY2xvdWRmb3JtYXRpb24nKTtcblxuY29uc3QgcGlwZWxpbmUgPSBuZXcgY29kZXBpcGVsaW5lLlBpcGVsaW5lKHN0YWNrLCAnUGlwZWxpbmUnKTtcblxuY29uc3Qgc291cmNlU3RhZ2UgPSBuZXcgY29kZXBpcGVsaW5lLlN0YWdlKHBpcGVsaW5lLCAnU291cmNlJywgeyBwaXBlbGluZSB9KTtcbmNvbnN0IGJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdQaXBlbGluZUJ1Y2tldCcsIHtcbiAgdmVyc2lvbmVkOiB0cnVlLFxuICByZW1vdmFsUG9saWN5OiBjZGsuUmVtb3ZhbFBvbGljeS5EZXN0cm95LFxufSk7XG5jb25zdCBzb3VyY2UgPSBuZXcgczMuUGlwZWxpbmVTb3VyY2VBY3Rpb24oc3RhY2ssICdTb3VyY2UnLCB7XG4gIHN0YWdlOiBzb3VyY2VTdGFnZSxcbiAgb3V0cHV0QXJ0aWZhY3ROYW1lOiAnU291cmNlQXJ0aWZhY3QnLFxuICBidWNrZXQsXG4gIGJ1Y2tldEtleTogJ2tleScsXG59KTtcblxuY29uc3QgY2ZuU3RhZ2UgPSBuZXcgY29kZXBpcGVsaW5lLlN0YWdlKHN0YWNrLCAnQ0ZOJywgeyBwaXBlbGluZSB9KTtcblxuY29uc3QgY2hhbmdlU2V0TmFtZSA9IFwiQ2hhbmdlU2V0SW50ZWdUZXN0XCI7XG5jb25zdCBzdGFja05hbWUgPSBcIkludGVnVGVzdC1UZXN0QWN0aW9uU3RhY2tcIjtcblxuY29uc3Qgcm9sZSA9IG5ldyBSb2xlKHN0YWNrLCAnQ2ZuQ2hhbmdlU2V0Um9sZScsIHtcbiAgYXNzdW1lZEJ5OiBuZXcgU2VydmljZVByaW5jaXBhbCgnY2xvdWRmb3JtYXRpb24uYW1hem9uYXdzLmNvbScpLFxufSk7XG5cbm5ldyBjZm4uUGlwZWxpbmVDcmVhdGVSZXBsYWNlQ2hhbmdlU2V0QWN0aW9uKHN0YWNrLCAnRGVwbG95Q0ZOJywge1xuICBzdGFnZTogY2ZuU3RhZ2UsXG4gIGNoYW5nZVNldE5hbWUsXG4gIHN0YWNrTmFtZSxcbiAgZGVwbG95bWVudFJvbGU6IHJvbGUsXG4gIHRlbXBsYXRlUGF0aDogc291cmNlLm91dHB1dEFydGlmYWN0LmF0UGF0aCgndGVzdC55YW1sJyksXG4gIGFkbWluUGVybWlzc2lvbnM6IGZhbHNlLFxuICBwYXJhbWV0ZXJPdmVycmlkZXM6IHtcbiAgICBCdWNrZXROYW1lOiBzb3VyY2Uub3V0cHV0QXJ0aWZhY3QuYnVja2V0TmFtZSxcbiAgICBPYmplY3RLZXk6IHNvdXJjZS5vdXRwdXRBcnRpZmFjdC5vYmplY3RLZXksXG4gICAgVXJsOiBzb3VyY2Uub3V0cHV0QXJ0aWZhY3QudXJsLFxuICAgIE90aGVyUGFyYW06IHNvdXJjZS5vdXRwdXRBcnRpZmFjdC5nZXRQYXJhbSgncGFyYW1zLmpzb24nLCAnT3RoZXJQYXJhbScpLFxuICB9LFxufSk7XG5cbmFwcC5ydW4oKTtcbiJdfQ==