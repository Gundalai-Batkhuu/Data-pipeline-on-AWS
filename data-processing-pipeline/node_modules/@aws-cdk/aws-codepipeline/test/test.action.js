"use strict";
// import { validateArtifactBounds, validateSourceAction } from '../lib/validation';
const assert_1 = require("@aws-cdk/assert");
const codebuild = require("@aws-cdk/aws-codebuild");
const codecommit = require("@aws-cdk/aws-codecommit");
const actions = require("@aws-cdk/aws-codepipeline-api");
const cdk = require("@aws-cdk/cdk");
const codepipeline = require("../lib");
// tslint:disable:object-literal-key-quotes
class TestAction extends actions.Action {
}
function boundsValidationResult(numberOfArtifacts, min, max) {
    const stack = new cdk.Stack();
    const pipeline = new codepipeline.Pipeline(stack, 'pipeline');
    const stage = new codepipeline.Stage(stack, 'stage', { pipeline });
    const action = new TestAction(stack, 'TestAction', {
        stage,
        artifactBounds: actions.defaultBounds(),
        category: actions.ActionCategory.Test,
        provider: 'test provider'
    });
    const artifacts = [];
    for (let i = 0; i < numberOfArtifacts; i++) {
        artifacts.push(new actions.Artifact(action, `TestArtifact${i}`));
    }
    return actions.validateArtifactBounds('output', artifacts, min, max, 'testCategory', 'testProvider');
}
module.exports = {
    'artifact bounds validation': {
        'artifacts count exceed maximum'(test) {
            const result = boundsValidationResult(1, 0, 0);
            test.deepEqual(result.length, 1);
            test.ok(result[0].match(/cannot have more than 0/), 'the validation should have failed');
            test.done();
        },
        'artifacts count below minimum'(test) {
            const result = boundsValidationResult(1, 2, 2);
            test.deepEqual(result.length, 1);
            test.ok(result[0].match(/must have at least 2/), 'the validation should have failed');
            test.done();
        },
        'artifacts count within bounds'(test) {
            const result = boundsValidationResult(1, 0, 2);
            test.deepEqual(result.length, 0);
            test.done();
        },
    },
    'action type validation': {
        'must be source and is source'(test) {
            const result = actions.validateSourceAction(true, actions.ActionCategory.Source, 'test action', 'test stage');
            test.deepEqual(result.length, 0);
            test.done();
        },
        'must be source and is not source'(test) {
            const result = actions.validateSourceAction(true, actions.ActionCategory.Deploy, 'test action', 'test stage');
            test.deepEqual(result.length, 1);
            test.ok(result[0].match(/may only contain Source actions/), 'the validation should have failed');
            test.done();
        },
        'cannot be source and is source'(test) {
            const result = actions.validateSourceAction(false, actions.ActionCategory.Source, 'test action', 'test stage');
            test.deepEqual(result.length, 1);
            test.ok(result[0].match(/may only occur in first stage/), 'the validation should have failed');
            test.done();
        },
        'cannot be source and is not source'(test) {
            const result = actions.validateSourceAction(false, actions.ActionCategory.Deploy, 'test action', 'test stage');
            test.deepEqual(result.length, 0);
            test.done();
        },
    },
    'automatically assigns artifact names to the Actions'(test) {
        const stack = new cdk.Stack();
        const pipeline = new codepipeline.Pipeline(stack, 'pipeline');
        const repo = new codecommit.Repository(stack, 'Repo', {
            repositoryName: 'Repo',
        });
        const sourceStage = pipeline.addStage('Source');
        repo.addToPipeline(sourceStage, 'CodeCommit');
        const project = new codebuild.PipelineProject(stack, 'Project');
        const buildStage = pipeline.addStage('Build');
        project.addToPipeline(buildStage, 'CodeBuild');
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
            "Stages": [
                {
                    "Name": "Source",
                    "Actions": [
                        {
                            "Name": "CodeCommit",
                            "InputArtifacts": [],
                            "OutputArtifacts": [
                                {
                                    "Name": "Artifact_RepoCodeCommit7910F5F9",
                                },
                            ],
                        }
                    ],
                },
                {
                    "Name": "Build",
                    "Actions": [
                        {
                            "Name": "CodeBuild",
                            "InputArtifacts": [
                                {
                                    "Name": "Artifact_RepoCodeCommit7910F5F9",
                                }
                            ],
                            "OutputArtifacts": [
                                {
                                    "Name": "Artifact_ProjectCodeBuildE34AD2EC",
                                },
                            ],
                        }
                    ],
                },
            ],
        }));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,