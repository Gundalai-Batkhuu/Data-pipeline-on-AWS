"use strict";
const assert_1 = require("@aws-cdk/assert");
const aws_cloudformation_1 = require("@aws-cdk/aws-cloudformation");
const aws_codebuild_1 = require("@aws-cdk/aws-codebuild");
const aws_codecommit_1 = require("@aws-cdk/aws-codecommit");
const aws_codepipeline_api_1 = require("@aws-cdk/aws-codepipeline-api");
const aws_iam_1 = require("@aws-cdk/aws-iam");
const aws_iam_2 = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const lib_1 = require("../lib");
/**
 * A test stack with a half-prepared pipeline ready to add CloudFormation actions to
 */
class TestFixture extends cdk.Stack {
    constructor() {
        super();
        this.pipeline = new lib_1.Pipeline(this, 'Pipeline');
        this.sourceStage = new lib_1.Stage(this.pipeline, 'Source', { pipeline: this.pipeline });
        this.deployStage = new lib_1.Stage(this.pipeline, 'Deploy', { pipeline: this.pipeline });
        this.repo = new aws_codecommit_1.Repository(this, 'MyVeryImportantRepo', { repositoryName: 'my-very-important-repo' });
        this.source = new aws_codecommit_1.PipelineSourceAction(this, 'Source', {
            stage: this.sourceStage,
            outputArtifactName: 'SourceArtifact',
            repository: this.repo,
        });
    }
}
module.exports = {
    'CreateChangeSetAction can be used to make a change set from a CodePipeline'(test) {
        const stack = new cdk.Stack();
        const pipeline = new lib_1.Pipeline(stack, 'MagicPipeline');
        const changeSetExecRole = new aws_iam_1.Role(stack, 'ChangeSetRole', {
            assumedBy: new aws_iam_2.ServicePrincipal('cloudformation.amazonaws.com'),
        });
        /** Source! */
        const repo = new aws_codecommit_1.Repository(stack, 'MyVeryImportantRepo', { repositoryName: 'my-very-important-repo' });
        const sourceStage = new lib_1.Stage(pipeline, 'source', { pipeline });
        const source = new aws_codecommit_1.PipelineSourceAction(stack, 'source', {
            stage: sourceStage,
            outputArtifactName: 'SourceArtifact',
            repository: repo,
            pollForSourceChanges: true,
        });
        /** Build! */
        const buildStage = new lib_1.Stage(pipeline, 'build', { pipeline });
        const buildArtifacts = new aws_codebuild_1.CodePipelineBuildArtifacts();
        const project = new aws_codebuild_1.Project(stack, 'MyBuildProject', {
            source: new aws_codebuild_1.CodePipelineSource(),
            artifacts: buildArtifacts,
        });
        const buildAction = new aws_codebuild_1.PipelineBuildAction(stack, 'build', {
            stage: buildStage,
            project,
            inputArtifact: source.outputArtifact,
            outputArtifactName: "OutputYo"
        });
        /** Deploy! */
        // To execute a change set - yes, you probably do need *:* ü§∑‚Äç‚ôÄÔ∏è
        changeSetExecRole.addToPolicy(new aws_iam_2.PolicyStatement().addAllResources().addAction("*"));
        const prodStage = new lib_1.Stage(stack, 'prod', { pipeline });
        const stackName = 'BrelandsStack';
        const changeSetName = 'MyMagicalChangeSet';
        new aws_cloudformation_1.PipelineCreateReplaceChangeSetAction(stack, 'BuildChangeSetProd', {
            stage: prodStage,
            stackName,
            changeSetName,
            deploymentRole: changeSetExecRole,
            templatePath: new aws_codepipeline_api_1.ArtifactPath(buildAction.outputArtifact, 'template.yaml'),
            templateConfiguration: new aws_codepipeline_api_1.ArtifactPath(buildAction.outputArtifact, 'templateConfig.json'),
            adminPermissions: false,
        });
        new aws_cloudformation_1.PipelineExecuteChangeSetAction(stack, 'ExecuteChangeSetProd', {
            stage: prodStage,
            stackName,
            changeSetName,
        });
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
            "ArtifactStore": {
                "Location": {
                    "Ref": "MagicPipelineArtifactsBucket212FE7BF"
                },
                "Type": "S3"
            }, "RoleArn": {
                "Fn::GetAtt": ["MagicPipelineRoleFB2BD6DE",
                    "Arn"
                ]
            },
            "Stages": [{
                    "Actions": [
                        {
                            "ActionTypeId": {
                                "Category": "Source",
                                "Owner": "AWS", "Provider": "CodeCommit", "Version": "1"
                            },
                            "Configuration": {
                                "RepositoryName": {
                                    "Fn::GetAtt": [
                                        "MyVeryImportantRepo11BC3EBD",
                                        "Name"
                                    ]
                                },
                                "BranchName": "master",
                                "PollForSourceChanges": true
                            },
                            "InputArtifacts": [],
                            "Name": "source",
                            "OutputArtifacts": [
                                {
                                    "Name": "SourceArtifact"
                                }
                            ],
                            "RunOrder": 1
                        }
                    ],
                    "Name": "source"
                },
                {
                    "Actions": [
                        {
                            "ActionTypeId": {
                                "Category": "Build",
                                "Owner": "AWS",
                                "Provider": "CodeBuild",
                                "Version": "1"
                            },
                            "Configuration": {
                                "ProjectName": {
                                    "Ref": "MyBuildProject30DB9D6E"
                                }
                            },
                            "InputArtifacts": [
                                {
                                    "Name": "SourceArtifact"
                                }
                            ],
                            "Name": "build",
                            "OutputArtifacts": [
                                {
                                    "Name": "OutputYo"
                                }
                            ],
                            "RunOrder": 1
                        }
                    ],
                    "Name": "build"
                },
                {
                    "Actions": [
                        {
                            "ActionTypeId": {
                                "Category": "Deploy",
                                "Owner": "AWS",
                                "Provider": "CloudFormation",
                                "Version": "1"
                            },
                            "Configuration": {
                                "ActionMode": "CHANGE_SET_REPLACE",
                                "ChangeSetName": "MyMagicalChangeSet",
                                "RoleArn": {
                                    "Fn::GetAtt": [
                                        "ChangeSetRole0BCF99E6",
                                        "Arn"
                                    ]
                                },
                                "StackName": "BrelandsStack",
                                "TemplatePath": "OutputYo::template.yaml",
                                "TemplateConfiguration": "OutputYo::templateConfig.json"
                            },
                            "InputArtifacts": [{ "Name": "OutputYo" }],
                            "Name": "BuildChangeSetProd",
                            "OutputArtifacts": [],
                            "RunOrder": 1
                        },
                        {
                            "ActionTypeId": {
                                "Category": "Deploy",
                                "Owner": "AWS",
                                "Provider": "CloudFormation",
                                "Version": "1"
                            },
                            "Configuration": {
                                "ActionMode": "CHANGE_SET_EXECUTE",
                                "ChangeSetName": "MyMagicalChangeSet"
                            },
                            "InputArtifacts": [],
                            "Name": "ExecuteChangeSetProd",
                            "OutputArtifacts": [],
                            "RunOrder": 1
                        }
                    ],
                    "Name": "prod"
                }
            ]
        }));
        test.done();
    },
    'fullPermissions leads to admin role and full IAM capabilities'(test) {
        // GIVEN
        const stack = new TestFixture();
        // WHEN
        new aws_cloudformation_1.PipelineCreateUpdateStackAction(stack.deployStage, 'CreateUpdate', {
            stage: stack.deployStage,
            stackName: 'MyStack',
            templatePath: stack.source.outputArtifact.atPath('template.yaml'),
            adminPermissions: true,
        });
        const roleId = "PipelineDeployCreateUpdateRole515CB7D4";
        // THEN: Action in Pipeline has named IAM capabilities
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
            "Stages": [
                { "Name": "Source" /* don't care about the rest */ },
                {
                    "Name": "Deploy",
                    "Actions": [
                        {
                            "Configuration": {
                                "Capabilities": "CAPABILITY_NAMED_IAM",
                                "RoleArn": { "Fn::GetAtt": [roleId, "Arn"] },
                                "ActionMode": "CREATE_UPDATE",
                                "StackName": "MyStack",
                                "TemplatePath": "SourceArtifact::template.yaml"
                            },
                            "InputArtifacts": [{ "Name": "SourceArtifact" }],
                            "Name": "CreateUpdate",
                        },
                    ],
                }
            ]
        }));
        // THEN: Role is created with full permissions
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            PolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                    {
                        Action: "*",
                        Effect: 'Allow',
                        Resource: "*"
                    }
                ],
            },
            Roles: [{ Ref: roleId }]
        }));
        test.done();
    },
    'outputFileName leads to creation of output artifact'(test) {
        // GIVEN
        const stack = new TestFixture();
        // WHEN
        new aws_cloudformation_1.PipelineCreateUpdateStackAction(stack, 'CreateUpdate', {
            stage: stack.deployStage,
            stackName: 'MyStack',
            templatePath: stack.source.outputArtifact.atPath('template.yaml'),
            outputFileName: 'CreateResponse.json',
            adminPermissions: false,
        });
        // THEN: Action has output artifacts
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
            "Stages": [
                { "Name": "Source" /* don't care about the rest */ },
                {
                    "Name": "Deploy",
                    "Actions": [
                        {
                            "OutputArtifacts": [{ "Name": "DeployCreateUpdateArtifact" }],
                            "Name": "CreateUpdate",
                        },
                    ],
                }
            ]
        }));
        test.done();
    },
    'replaceOnFailure switches action type'(test) {
        // GIVEN
        const stack = new TestFixture();
        // WHEN
        new aws_cloudformation_1.PipelineCreateUpdateStackAction(stack, 'CreateUpdate', {
            stage: stack.deployStage,
            stackName: 'MyStack',
            templatePath: stack.source.outputArtifact.atPath('template.yaml'),
            replaceOnFailure: true,
            adminPermissions: false,
        });
        // THEN: Action has output artifacts
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
            "Stages": [
                { "Name": "Source" /* don't care about the rest */ },
                {
                    "Name": "Deploy",
                    "Actions": [
                        {
                            "Configuration": {
                                "ActionMode": "REPLACE_ON_FAILURE",
                            },
                            "Name": "CreateUpdate",
                        },
                    ],
                }
            ]
        }));
        test.done();
    },
    'parameterOverrides are serialized as a string'(test) {
        // GIVEN
        const stack = new TestFixture();
        // WHEN
        new aws_cloudformation_1.PipelineCreateUpdateStackAction(stack, 'CreateUpdate', {
            stage: stack.deployStage,
            stackName: 'MyStack',
            templatePath: stack.source.outputArtifact.atPath('template.yaml'),
            adminPermissions: false,
            parameterOverrides: {
                RepoName: stack.repo.repositoryName
            }
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
            "Stages": [
                { "Name": "Source" /* don't care about the rest */ },
                {
                    "Name": "Deploy",
                    "Actions": [
                        {
                            "Configuration": {
                                "ParameterOverrides": { "Fn::Join": ["", [
                                            "{\"RepoName\":\"",
                                            { "Fn::GetAtt": ["MyVeryImportantRepo11BC3EBD", "Name"] },
                                            "\"}"
                                        ]] }
                            },
                            "Name": "CreateUpdate",
                        },
                    ],
                }
            ]
        }));
        test.done();
    },
    'Action service role is passed to template'(test) {
        const stack = new TestFixture();
        const importedRole = aws_iam_1.Role.import(stack, 'ImportedRole', {
            roleArn: 'arn:aws:iam::000000000000:role/action-role'
        });
        const freshRole = new aws_iam_1.Role(stack, 'FreshRole', {
            assumedBy: new aws_iam_2.ServicePrincipal('magicservice')
        });
        new aws_cloudformation_1.PipelineExecuteChangeSetAction(stack.pipeline, 'ImportedRoleAction', {
            role: importedRole,
            changeSetName: 'magicSet',
            stackName: 'magicStack',
            stage: stack.deployStage
        });
        new aws_cloudformation_1.PipelineExecuteChangeSetAction(stack.pipeline, 'FreshRoleAction', {
            role: freshRole,
            changeSetName: 'magicSet',
            stackName: 'magicStack',
            stage: stack.deployStage
        });
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
            "Stages": [
                {
                    "Name": "Source" /* don't care about the rest */
                },
                {
                    "Name": "Deploy",
                    "Actions": [
                        {
                            "Name": "ImportedRoleAction",
                            "RoleArn": "arn:aws:iam::000000000000:role/action-role"
                        },
                        {
                            "Name": "FreshRoleAction",
                            "RoleArn": {
                                "Fn::GetAtt": [
                                    "FreshRole472F6E18",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                }
            ]
        }));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,