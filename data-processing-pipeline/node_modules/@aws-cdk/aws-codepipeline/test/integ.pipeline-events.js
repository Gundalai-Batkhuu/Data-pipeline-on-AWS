"use strict";
// Use pipeline as CloudWAtch event target
Object.defineProperty(exports, "__esModule", { value: true });
const codebuild = require("@aws-cdk/aws-codebuild");
const codecommit = require("@aws-cdk/aws-codecommit");
const sns = require("@aws-cdk/aws-sns");
const cdk = require("@aws-cdk/cdk");
const codepipeline = require("../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-pipeline-event-target');
const pipeline = new codepipeline.Pipeline(stack, 'MyPipeline');
const sourceStage = new codepipeline.Stage(stack, 'Source', { pipeline });
const buildStage = new codepipeline.Stage(stack, 'Build', { pipeline });
const repository = new codecommit.Repository(stack, 'CodeCommitRepo', {
    repositoryName: 'foo'
});
const project = new codebuild.PipelineProject(stack, 'BuildProject');
const sourceAction = new codecommit.PipelineSourceAction(pipeline, 'CodeCommitSource', {
    stage: sourceStage,
    outputArtifactName: 'Source',
    repository,
    pollForSourceChanges: true,
});
new codebuild.PipelineBuildAction(stack, 'CodeBuildAction', {
    stage: buildStage,
    inputArtifact: sourceAction.outputArtifact,
    project
});
const topic = new sns.Topic(stack, 'MyTopic');
pipeline.onStateChange('OnPipelineStateChange').addTarget(topic, {
    textTemplate: 'Pipeline <pipeline> changed state to <state>',
    pathsMap: {
        pipeline: '$.detail.pipeline',
        state: '$.detail.state'
    }
});
sourceStage.onStateChange('OnSourceStateChange', topic);
sourceAction.onStateChange('OnActionStateChange', topic).addEventPattern({
    detail: { state: ['STARTED'] }
});
app.run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucGlwZWxpbmUtZXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcucGlwZWxpbmUtZXZlbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwwQ0FBMEM7O0FBRTFDLG9EQUFxRDtBQUNyRCxzREFBdUQ7QUFDdkQsd0NBQXlDO0FBQ3pDLG9DQUFxQztBQUNyQyx1Q0FBd0M7QUFFeEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSwrQkFBK0IsQ0FBQyxDQUFDO0FBRWxFLE1BQU0sUUFBUSxHQUFHLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDaEUsTUFBTSxXQUFXLEdBQUcsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQzFFLE1BQU0sVUFBVSxHQUFHLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUV4RSxNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLGdCQUFnQixFQUFFO0lBQ3BFLGNBQWMsRUFBRSxLQUFLO0NBQ3RCLENBQUMsQ0FBQztBQUNILE1BQU0sT0FBTyxHQUFHLElBQUksU0FBUyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFFckUsTUFBTSxZQUFZLEdBQUcsSUFBSSxVQUFVLENBQUMsb0JBQW9CLENBQUMsUUFBUSxFQUFFLGtCQUFrQixFQUFFO0lBQ3JGLEtBQUssRUFBRSxXQUFXO0lBQ2xCLGtCQUFrQixFQUFFLFFBQVE7SUFDNUIsVUFBVTtJQUNWLG9CQUFvQixFQUFFLElBQUk7Q0FDM0IsQ0FBQyxDQUFDO0FBQ0gsSUFBSSxTQUFTLENBQUMsbUJBQW1CLENBQUMsS0FBSyxFQUFFLGlCQUFpQixFQUFFO0lBQzFELEtBQUssRUFBRSxVQUFVO0lBQ2pCLGFBQWEsRUFBRSxZQUFZLENBQUMsY0FBYztJQUMxQyxPQUFPO0NBQ1IsQ0FBQyxDQUFDO0FBRUgsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztBQUU5QyxRQUFRLENBQUMsYUFBYSxDQUFDLHVCQUF1QixDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRTtJQUMvRCxZQUFZLEVBQUUsOENBQThDO0lBQzVELFFBQVEsRUFBRTtRQUNSLFFBQVEsRUFBRSxtQkFBbUI7UUFDN0IsS0FBSyxFQUFFLGdCQUFnQjtLQUN4QjtDQUNGLENBQUMsQ0FBQztBQUVILFdBQVcsQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFFeEQsWUFBWSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLENBQUMsQ0FBQyxlQUFlLENBQUM7SUFDdkUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUUsU0FBUyxDQUFFLEVBQUU7Q0FDakMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVXNlIHBpcGVsaW5lIGFzIENsb3VkV0F0Y2ggZXZlbnQgdGFyZ2V0XG5cbmltcG9ydCBjb2RlYnVpbGQgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtY29kZWJ1aWxkJyk7XG5pbXBvcnQgY29kZWNvbW1pdCA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1jb2RlY29tbWl0Jyk7XG5pbXBvcnQgc25zID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLXNucycpO1xuaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NkaycpO1xuaW1wb3J0IGNvZGVwaXBlbGluZSA9IHJlcXVpcmUoJy4uL2xpYicpO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG5jb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnYXdzLWNkay1waXBlbGluZS1ldmVudC10YXJnZXQnKTtcblxuY29uc3QgcGlwZWxpbmUgPSBuZXcgY29kZXBpcGVsaW5lLlBpcGVsaW5lKHN0YWNrLCAnTXlQaXBlbGluZScpO1xuY29uc3Qgc291cmNlU3RhZ2UgPSBuZXcgY29kZXBpcGVsaW5lLlN0YWdlKHN0YWNrLCAnU291cmNlJywgeyBwaXBlbGluZSB9KTtcbmNvbnN0IGJ1aWxkU3RhZ2UgPSBuZXcgY29kZXBpcGVsaW5lLlN0YWdlKHN0YWNrLCAnQnVpbGQnLCB7IHBpcGVsaW5lIH0pO1xuXG5jb25zdCByZXBvc2l0b3J5ID0gbmV3IGNvZGVjb21taXQuUmVwb3NpdG9yeShzdGFjaywgJ0NvZGVDb21taXRSZXBvJywge1xuICByZXBvc2l0b3J5TmFtZTogJ2Zvbydcbn0pO1xuY29uc3QgcHJvamVjdCA9IG5ldyBjb2RlYnVpbGQuUGlwZWxpbmVQcm9qZWN0KHN0YWNrLCAnQnVpbGRQcm9qZWN0Jyk7XG5cbmNvbnN0IHNvdXJjZUFjdGlvbiA9IG5ldyBjb2RlY29tbWl0LlBpcGVsaW5lU291cmNlQWN0aW9uKHBpcGVsaW5lLCAnQ29kZUNvbW1pdFNvdXJjZScsIHtcbiAgc3RhZ2U6IHNvdXJjZVN0YWdlLFxuICBvdXRwdXRBcnRpZmFjdE5hbWU6ICdTb3VyY2UnLFxuICByZXBvc2l0b3J5LFxuICBwb2xsRm9yU291cmNlQ2hhbmdlczogdHJ1ZSxcbn0pO1xubmV3IGNvZGVidWlsZC5QaXBlbGluZUJ1aWxkQWN0aW9uKHN0YWNrLCAnQ29kZUJ1aWxkQWN0aW9uJywge1xuICBzdGFnZTogYnVpbGRTdGFnZSxcbiAgaW5wdXRBcnRpZmFjdDogc291cmNlQWN0aW9uLm91dHB1dEFydGlmYWN0LFxuICBwcm9qZWN0XG59KTtcblxuY29uc3QgdG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnTXlUb3BpYycpO1xuXG5waXBlbGluZS5vblN0YXRlQ2hhbmdlKCdPblBpcGVsaW5lU3RhdGVDaGFuZ2UnKS5hZGRUYXJnZXQodG9waWMsIHtcbiAgdGV4dFRlbXBsYXRlOiAnUGlwZWxpbmUgPHBpcGVsaW5lPiBjaGFuZ2VkIHN0YXRlIHRvIDxzdGF0ZT4nLFxuICBwYXRoc01hcDoge1xuICAgIHBpcGVsaW5lOiAnJC5kZXRhaWwucGlwZWxpbmUnLFxuICAgIHN0YXRlOiAnJC5kZXRhaWwuc3RhdGUnXG4gIH1cbn0pO1xuXG5zb3VyY2VTdGFnZS5vblN0YXRlQ2hhbmdlKCdPblNvdXJjZVN0YXRlQ2hhbmdlJywgdG9waWMpO1xuXG5zb3VyY2VBY3Rpb24ub25TdGF0ZUNoYW5nZSgnT25BY3Rpb25TdGF0ZUNoYW5nZScsIHRvcGljKS5hZGRFdmVudFBhdHRlcm4oe1xuICBkZXRhaWw6IHsgc3RhdGU6IFsgJ1NUQVJURUQnIF0gfVxufSk7XG5cbmFwcC5ydW4oKTtcbiJdfQ==