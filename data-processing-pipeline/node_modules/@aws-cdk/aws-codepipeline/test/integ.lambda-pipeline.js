"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cloudtrail = require("@aws-cdk/aws-cloudtrail");
const lambda = require("@aws-cdk/aws-lambda");
const s3 = require("@aws-cdk/aws-s3");
const cdk = require("@aws-cdk/cdk");
const codepipeline = require("../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-codepipeline-lambda');
const pipeline = new codepipeline.Pipeline(stack, 'Pipeline');
const sourceStage = new codepipeline.Stage(pipeline, 'Source', { pipeline });
const bucket = new s3.Bucket(stack, 'PipelineBucket', {
    versioned: true,
    removalPolicy: cdk.RemovalPolicy.Destroy,
});
const key = 'key';
const trail = new cloudtrail.CloudTrail(stack, 'CloudTrail');
trail.addS3EventSelector([bucket.arnForObjects(key)], cloudtrail.ReadWriteType.WriteOnly);
new s3.PipelineSourceAction(stack, 'Source', {
    stage: sourceStage,
    outputArtifactName: 'SourceArtifact',
    bucket,
    bucketKey: key,
    pollForSourceChanges: false,
});
const lambdaFun = new lambda.Function(stack, 'LambdaFun', {
    code: new lambda.InlineCode(`
    exports.handler = function () {
      console.log("Hello, world!");
    };
  `),
    handler: 'index.handler',
    runtime: lambda.Runtime.NodeJS610,
});
const lambdaStage = new codepipeline.Stage(pipeline, 'Lambda', { pipeline });
lambdaFun.addToPipeline(lambdaStage, 'Lambda');
app.run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcubGFtYmRhLXBpcGVsaW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcubGFtYmRhLXBpcGVsaW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0RBQXVEO0FBQ3ZELDhDQUErQztBQUMvQyxzQ0FBdUM7QUFDdkMsb0NBQXFDO0FBQ3JDLHVDQUF3QztBQUV4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLDZCQUE2QixDQUFDLENBQUM7QUFFaEUsTUFBTSxRQUFRLEdBQUcsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztBQUU5RCxNQUFNLFdBQVcsR0FBRyxJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDN0UsTUFBTSxNQUFNLEdBQUcsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRTtJQUNwRCxTQUFTLEVBQUUsSUFBSTtJQUNmLGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU87Q0FDekMsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ2xCLE1BQU0sS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDN0QsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDMUYsSUFBSSxFQUFFLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtJQUMzQyxLQUFLLEVBQUUsV0FBVztJQUNsQixrQkFBa0IsRUFBRSxnQkFBZ0I7SUFDcEMsTUFBTTtJQUNOLFNBQVMsRUFBRSxHQUFHO0lBQ2Qsb0JBQW9CLEVBQUUsS0FBSztDQUM1QixDQUFDLENBQUM7QUFFSCxNQUFNLFNBQVMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRTtJQUN4RCxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDOzs7O0dBSTNCLENBQUM7SUFDRixPQUFPLEVBQUUsZUFBZTtJQUN4QixPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTO0NBQ2xDLENBQUMsQ0FBQztBQUNILE1BQU0sV0FBVyxHQUFHLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUM3RSxTQUFTLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUUvQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xvdWR0cmFpbCA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1jbG91ZHRyYWlsJyk7XG5pbXBvcnQgbGFtYmRhID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWxhbWJkYScpO1xuaW1wb3J0IHMzID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLXMzJyk7XG5pbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY2RrJyk7XG5pbXBvcnQgY29kZXBpcGVsaW5lID0gcmVxdWlyZSgnLi4vbGliJyk7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdhd3MtY2RrLWNvZGVwaXBlbGluZS1sYW1iZGEnKTtcblxuY29uc3QgcGlwZWxpbmUgPSBuZXcgY29kZXBpcGVsaW5lLlBpcGVsaW5lKHN0YWNrLCAnUGlwZWxpbmUnKTtcblxuY29uc3Qgc291cmNlU3RhZ2UgPSBuZXcgY29kZXBpcGVsaW5lLlN0YWdlKHBpcGVsaW5lLCAnU291cmNlJywgeyBwaXBlbGluZSB9KTtcbmNvbnN0IGJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdQaXBlbGluZUJ1Y2tldCcsIHtcbiAgdmVyc2lvbmVkOiB0cnVlLFxuICByZW1vdmFsUG9saWN5OiBjZGsuUmVtb3ZhbFBvbGljeS5EZXN0cm95LFxufSk7XG5jb25zdCBrZXkgPSAna2V5JztcbmNvbnN0IHRyYWlsID0gbmV3IGNsb3VkdHJhaWwuQ2xvdWRUcmFpbChzdGFjaywgJ0Nsb3VkVHJhaWwnKTtcbnRyYWlsLmFkZFMzRXZlbnRTZWxlY3RvcihbYnVja2V0LmFybkZvck9iamVjdHMoa2V5KV0sIGNsb3VkdHJhaWwuUmVhZFdyaXRlVHlwZS5Xcml0ZU9ubHkpO1xubmV3IHMzLlBpcGVsaW5lU291cmNlQWN0aW9uKHN0YWNrLCAnU291cmNlJywge1xuICBzdGFnZTogc291cmNlU3RhZ2UsXG4gIG91dHB1dEFydGlmYWN0TmFtZTogJ1NvdXJjZUFydGlmYWN0JyxcbiAgYnVja2V0LFxuICBidWNrZXRLZXk6IGtleSxcbiAgcG9sbEZvclNvdXJjZUNoYW5nZXM6IGZhbHNlLFxufSk7XG5cbmNvbnN0IGxhbWJkYUZ1biA9IG5ldyBsYW1iZGEuRnVuY3Rpb24oc3RhY2ssICdMYW1iZGFGdW4nLCB7XG4gIGNvZGU6IG5ldyBsYW1iZGEuSW5saW5lQ29kZShgXG4gICAgZXhwb3J0cy5oYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgY29uc29sZS5sb2coXCJIZWxsbywgd29ybGQhXCIpO1xuICAgIH07XG4gIGApLFxuICBoYW5kbGVyOiAnaW5kZXguaGFuZGxlcicsXG4gIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLk5vZGVKUzYxMCxcbn0pO1xuY29uc3QgbGFtYmRhU3RhZ2UgPSBuZXcgY29kZXBpcGVsaW5lLlN0YWdlKHBpcGVsaW5lLCAnTGFtYmRhJywgeyBwaXBlbGluZSB9KTtcbmxhbWJkYUZ1bi5hZGRUb1BpcGVsaW5lKGxhbWJkYVN0YWdlLCAnTGFtYmRhJyk7XG5cbmFwcC5ydW4oKTtcbiJdfQ==