"use strict";
const actions = require("@aws-cdk/aws-codepipeline-api");
const s3 = require("@aws-cdk/aws-s3");
const cdk = require("@aws-cdk/cdk");
const pipeline_1 = require("../lib/pipeline");
const stage_1 = require("../lib/stage");
function stageForTesting() {
    const stack = new cdk.Stack();
    const pipeline = new pipeline_1.Pipeline(stack, 'pipeline');
    return new stage_1.Stage(stack, 'stage', { pipeline });
}
module.exports = {
    'name validation'(test) {
        const cases = [
            { name: 'BlahBleep123.@-_', shouldPassValidation: true, explanation: 'should be valid' },
            { name: '', shouldPassValidation: false, explanation: 'the empty string should be invalid' },
            { name: ' BlahBleep', shouldPassValidation: false, explanation: 'spaces should be invalid' },
            { name: '!BlahBleep', shouldPassValidation: false, explanation: '\'!\' should be invalid' }
        ];
        cases.forEach(testCase => {
            const name = testCase.name;
            const validationBlock = () => { actions.validateName('test thing', name); };
            if (testCase.shouldPassValidation) {
                test.doesNotThrow(validationBlock, Error, `${name} failed validation but ${testCase.explanation}`);
            }
            else {
                test.throws(validationBlock, Error, `${name} passed validation but ${testCase.explanation}`);
            }
        });
        test.done();
    },
    'Stage validation': {
        'should fail if Stage has no Actions'(test) {
            const stage = stageForTesting();
            test.deepEqual(stage.node.validateTree().length, 1);
            test.done();
        }
    },
    'Pipeline validation': {
        'should fail if Pipeline has no Stages'(test) {
            const stack = new cdk.Stack();
            const pipeline = new pipeline_1.Pipeline(stack, 'Pipeline');
            test.deepEqual(pipeline.node.validateTree().length, 1);
            test.done();
        },
        'should fail if Pipeline has a Source Action in a non-first Stage'(test) {
            const stack = new cdk.Stack();
            const pipeline = new pipeline_1.Pipeline(stack, 'Pipeline');
            const firstStage = new stage_1.Stage(stack, 'FirstStage', { pipeline });
            const secondStage = new stage_1.Stage(stack, 'SecondStage', { pipeline });
            const bucket = new s3.Bucket(stack, 'PipelineBucket');
            new s3.PipelineSourceAction(stack, 'FirstAction', {
                stage: firstStage,
                outputArtifactName: 'FirstArtifact',
                bucket,
                bucketKey: 'key',
            });
            new s3.PipelineSourceAction(stack, 'SecondAction', {
                stage: secondStage,
                outputArtifactName: 'SecondAction',
                bucket,
                bucketKey: 'key',
            });
            test.deepEqual(pipeline.node.validateTree().length, 1);
            test.done();
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5nZW5lcmFsLXZhbGlkYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0LmdlbmVyYWwtdmFsaWRhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEseURBQTBEO0FBQzFELHNDQUF1QztBQUN2QyxvQ0FBcUM7QUFFckMsOENBQTJDO0FBQzNDLHdDQUFxQztBQTZFckMsU0FBUyxlQUFlO0lBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzlCLE1BQU0sUUFBUSxHQUFHLElBQUksbUJBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDakQsT0FBTyxJQUFJLGFBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBekVELGlCQUFTO0lBQ1AsaUJBQWlCLENBQUMsSUFBVTtRQUMxQixNQUFNLEtBQUssR0FBNkI7WUFDdEMsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRTtZQUN4RixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxvQ0FBb0MsRUFBRTtZQUM1RixFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSwwQkFBMEIsRUFBRTtZQUM1RixFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSx5QkFBeUIsRUFBRTtTQUM1RixDQUFDO1FBRUYsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN2QixNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQzNCLE1BQU0sZUFBZSxHQUFHLEdBQUcsRUFBRSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVFLElBQUksUUFBUSxDQUFDLG9CQUFvQixFQUFFO2dCQUNqQyxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLDBCQUEwQixRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQzthQUNwRztpQkFBTTtnQkFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLDBCQUEwQixRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQzthQUM5RjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELGtCQUFrQixFQUFFO1FBQ2xCLHFDQUFxQyxDQUFDLElBQVU7WUFDOUMsTUFBTSxLQUFLLEdBQUcsZUFBZSxFQUFFLENBQUM7WUFFaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUVwRCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxDQUFDO0tBQ0Y7SUFFRCxxQkFBcUIsRUFBRTtRQUNyQix1Q0FBdUMsQ0FBQyxJQUFVO1lBQ2hELE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzlCLE1BQU0sUUFBUSxHQUFHLElBQUksbUJBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFFakQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUV2RCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxDQUFDO1FBRUQsa0VBQWtFLENBQUMsSUFBVTtZQUMzRSxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUM5QixNQUFNLFFBQVEsR0FBRyxJQUFJLG1CQUFRLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ2pELE1BQU0sVUFBVSxHQUFHLElBQUksYUFBSyxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQ2hFLE1BQU0sV0FBVyxHQUFHLElBQUksYUFBSyxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBRWxFLE1BQU0sTUFBTSxHQUFHLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUN0RCxJQUFJLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFO2dCQUNoRCxLQUFLLEVBQUUsVUFBVTtnQkFDakIsa0JBQWtCLEVBQUUsZUFBZTtnQkFDbkMsTUFBTTtnQkFDTixTQUFTLEVBQUUsS0FBSzthQUNqQixDQUFDLENBQUM7WUFDSCxJQUFJLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO2dCQUNqRCxLQUFLLEVBQUUsV0FBVztnQkFDbEIsa0JBQWtCLEVBQUUsY0FBYztnQkFDbEMsTUFBTTtnQkFDTixTQUFTLEVBQUUsS0FBSzthQUNqQixDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBRXZELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNkLENBQUM7S0FDRjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYWN0aW9ucyA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1jb2RlcGlwZWxpbmUtYXBpJyk7XG5pbXBvcnQgczMgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtczMnKTtcbmltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcbmltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgeyBQaXBlbGluZSB9IGZyb20gJy4uL2xpYi9waXBlbGluZSc7XG5pbXBvcnQgeyBTdGFnZSB9IGZyb20gJy4uL2xpYi9zdGFnZSc7XG5cbmludGVyZmFjZSBOYW1lVmFsaWRhdGlvblRlc3RDYXNlIHtcbiAgbmFtZTogc3RyaW5nO1xuICBzaG91bGRQYXNzVmFsaWRhdGlvbjogYm9vbGVhbjtcbiAgZXhwbGFuYXRpb246IHN0cmluZztcbn1cblxuZXhwb3J0ID0ge1xuICAnbmFtZSB2YWxpZGF0aW9uJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3QgY2FzZXM6IE5hbWVWYWxpZGF0aW9uVGVzdENhc2VbXSA9IFtcbiAgICAgIHsgbmFtZTogJ0JsYWhCbGVlcDEyMy5ALV8nLCBzaG91bGRQYXNzVmFsaWRhdGlvbjogdHJ1ZSwgZXhwbGFuYXRpb246ICdzaG91bGQgYmUgdmFsaWQnIH0sXG4gICAgICB7IG5hbWU6ICcnLCBzaG91bGRQYXNzVmFsaWRhdGlvbjogZmFsc2UsIGV4cGxhbmF0aW9uOiAndGhlIGVtcHR5IHN0cmluZyBzaG91bGQgYmUgaW52YWxpZCcgfSxcbiAgICAgIHsgbmFtZTogJyBCbGFoQmxlZXAnLCBzaG91bGRQYXNzVmFsaWRhdGlvbjogZmFsc2UsIGV4cGxhbmF0aW9uOiAnc3BhY2VzIHNob3VsZCBiZSBpbnZhbGlkJyB9LFxuICAgICAgeyBuYW1lOiAnIUJsYWhCbGVlcCcsIHNob3VsZFBhc3NWYWxpZGF0aW9uOiBmYWxzZSwgZXhwbGFuYXRpb246ICdcXCchXFwnIHNob3VsZCBiZSBpbnZhbGlkJyB9XG4gICAgXTtcblxuICAgIGNhc2VzLmZvckVhY2godGVzdENhc2UgPT4ge1xuICAgICAgY29uc3QgbmFtZSA9IHRlc3RDYXNlLm5hbWU7XG4gICAgICBjb25zdCB2YWxpZGF0aW9uQmxvY2sgPSAoKSA9PiB7IGFjdGlvbnMudmFsaWRhdGVOYW1lKCd0ZXN0IHRoaW5nJywgbmFtZSk7IH07XG4gICAgICBpZiAodGVzdENhc2Uuc2hvdWxkUGFzc1ZhbGlkYXRpb24pIHtcbiAgICAgICAgdGVzdC5kb2VzTm90VGhyb3codmFsaWRhdGlvbkJsb2NrLCBFcnJvciwgYCR7bmFtZX0gZmFpbGVkIHZhbGlkYXRpb24gYnV0ICR7dGVzdENhc2UuZXhwbGFuYXRpb259YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXN0LnRocm93cyh2YWxpZGF0aW9uQmxvY2ssIEVycm9yLCBgJHtuYW1lfSBwYXNzZWQgdmFsaWRhdGlvbiBidXQgJHt0ZXN0Q2FzZS5leHBsYW5hdGlvbn1gKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdTdGFnZSB2YWxpZGF0aW9uJzoge1xuICAgICdzaG91bGQgZmFpbCBpZiBTdGFnZSBoYXMgbm8gQWN0aW9ucycodGVzdDogVGVzdCkge1xuICAgICAgY29uc3Qgc3RhZ2UgPSBzdGFnZUZvclRlc3RpbmcoKTtcblxuICAgICAgdGVzdC5kZWVwRXF1YWwoc3RhZ2Uubm9kZS52YWxpZGF0ZVRyZWUoKS5sZW5ndGgsIDEpO1xuXG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9XG4gIH0sXG5cbiAgJ1BpcGVsaW5lIHZhbGlkYXRpb24nOiB7XG4gICAgJ3Nob3VsZCBmYWlsIGlmIFBpcGVsaW5lIGhhcyBubyBTdGFnZXMnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgY29uc3QgcGlwZWxpbmUgPSBuZXcgUGlwZWxpbmUoc3RhY2ssICdQaXBlbGluZScpO1xuXG4gICAgICB0ZXN0LmRlZXBFcXVhbChwaXBlbGluZS5ub2RlLnZhbGlkYXRlVHJlZSgpLmxlbmd0aCwgMSk7XG5cbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAnc2hvdWxkIGZhaWwgaWYgUGlwZWxpbmUgaGFzIGEgU291cmNlIEFjdGlvbiBpbiBhIG5vbi1maXJzdCBTdGFnZScodGVzdDogVGVzdCkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICBjb25zdCBwaXBlbGluZSA9IG5ldyBQaXBlbGluZShzdGFjaywgJ1BpcGVsaW5lJyk7XG4gICAgICBjb25zdCBmaXJzdFN0YWdlID0gbmV3IFN0YWdlKHN0YWNrLCAnRmlyc3RTdGFnZScsIHsgcGlwZWxpbmUgfSk7XG4gICAgICBjb25zdCBzZWNvbmRTdGFnZSA9IG5ldyBTdGFnZShzdGFjaywgJ1NlY29uZFN0YWdlJywgeyBwaXBlbGluZSB9KTtcblxuICAgICAgY29uc3QgYnVja2V0ID0gbmV3IHMzLkJ1Y2tldChzdGFjaywgJ1BpcGVsaW5lQnVja2V0Jyk7XG4gICAgICBuZXcgczMuUGlwZWxpbmVTb3VyY2VBY3Rpb24oc3RhY2ssICdGaXJzdEFjdGlvbicsIHtcbiAgICAgICAgc3RhZ2U6IGZpcnN0U3RhZ2UsXG4gICAgICAgIG91dHB1dEFydGlmYWN0TmFtZTogJ0ZpcnN0QXJ0aWZhY3QnLFxuICAgICAgICBidWNrZXQsXG4gICAgICAgIGJ1Y2tldEtleTogJ2tleScsXG4gICAgICB9KTtcbiAgICAgIG5ldyBzMy5QaXBlbGluZVNvdXJjZUFjdGlvbihzdGFjaywgJ1NlY29uZEFjdGlvbicsIHtcbiAgICAgICAgc3RhZ2U6IHNlY29uZFN0YWdlLFxuICAgICAgICBvdXRwdXRBcnRpZmFjdE5hbWU6ICdTZWNvbmRBY3Rpb24nLFxuICAgICAgICBidWNrZXQsXG4gICAgICAgIGJ1Y2tldEtleTogJ2tleScsXG4gICAgICB9KTtcblxuICAgICAgdGVzdC5kZWVwRXF1YWwocGlwZWxpbmUubm9kZS52YWxpZGF0ZVRyZWUoKS5sZW5ndGgsIDEpO1xuXG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0YWdlRm9yVGVzdGluZygpOiBTdGFnZSB7XG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICBjb25zdCBwaXBlbGluZSA9IG5ldyBQaXBlbGluZShzdGFjaywgJ3BpcGVsaW5lJyk7XG4gIHJldHVybiBuZXcgU3RhZ2Uoc3RhY2ssICdzdGFnZScsIHsgcGlwZWxpbmUgfSk7XG59XG4iXX0=