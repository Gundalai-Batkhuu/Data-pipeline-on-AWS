"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cfn = require("@aws-cdk/aws-cloudformation");
const codecommit = require("@aws-cdk/aws-codecommit");
const cdk = require("@aws-cdk/cdk");
const codepipeline = require("../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-codepipeline-cloudformation');
/// !show
const pipeline = new codepipeline.Pipeline(stack, 'Pipeline');
// Source stage: read from repository
const repo = new codecommit.Repository(stack, 'TemplateRepo', {
    repositoryName: 'template-repo'
});
const sourceStage = new codepipeline.Stage(pipeline, 'Source', { pipeline });
const source = new codecommit.PipelineSourceAction(stack, 'Source', {
    stage: sourceStage,
    repository: repo,
    outputArtifactName: 'SourceArtifact',
    pollForSourceChanges: true,
});
// Deployment stage: create and deploy changeset with manual approval
const prodStage = new codepipeline.Stage(pipeline, 'Deploy', { pipeline });
const stackName = 'OurStack';
const changeSetName = 'StagedChangeSet';
new cfn.PipelineCreateReplaceChangeSetAction(prodStage, 'PrepareChanges', {
    stage: prodStage,
    stackName,
    changeSetName,
    adminPermissions: true,
    templatePath: source.outputArtifact.atPath('template.yaml'),
});
new codepipeline.ManualApprovalAction(stack, 'ApproveChanges', {
    stage: prodStage,
});
new cfn.PipelineExecuteChangeSetAction(stack, 'ExecuteChanges', {
    stage: prodStage,
    stackName,
    changeSetName,
});
/// !hide
app.run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuY2ZuLXRlbXBsYXRlLWZyb20tcmVwby5saXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5jZm4tdGVtcGxhdGUtZnJvbS1yZXBvLmxpdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1EQUFvRDtBQUNwRCxzREFBdUQ7QUFDdkQsb0NBQXFDO0FBQ3JDLHVDQUF3QztBQUV4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLHFDQUFxQyxDQUFDLENBQUM7QUFFeEUsU0FBUztBQUNULE1BQU0sUUFBUSxHQUFHLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFFOUQscUNBQXFDO0FBQ3JDLE1BQU0sSUFBSSxHQUFHLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO0lBQzVELGNBQWMsRUFBRSxlQUFlO0NBQ2hDLENBQUMsQ0FBQztBQUNILE1BQU0sV0FBVyxHQUFHLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUM3RSxNQUFNLE1BQU0sR0FBRyxJQUFJLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFO0lBQ2xFLEtBQUssRUFBRSxXQUFXO0lBQ2xCLFVBQVUsRUFBRSxJQUFJO0lBQ2hCLGtCQUFrQixFQUFFLGdCQUFnQjtJQUNwQyxvQkFBb0IsRUFBRSxJQUFJO0NBQzNCLENBQUMsQ0FBQztBQUVILHFFQUFxRTtBQUNyRSxNQUFNLFNBQVMsR0FBRyxJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDM0UsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDO0FBQzdCLE1BQU0sYUFBYSxHQUFHLGlCQUFpQixDQUFDO0FBRXhDLElBQUksR0FBRyxDQUFDLG9DQUFvQyxDQUFDLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtJQUN4RSxLQUFLLEVBQUUsU0FBUztJQUNoQixTQUFTO0lBQ1QsYUFBYTtJQUNiLGdCQUFnQixFQUFFLElBQUk7SUFDdEIsWUFBWSxFQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQztDQUM1RCxDQUFDLENBQUM7QUFFSCxJQUFJLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUU7SUFDN0QsS0FBSyxFQUFFLFNBQVM7Q0FDakIsQ0FBQyxDQUFDO0FBRUgsSUFBSSxHQUFHLENBQUMsOEJBQThCLENBQUMsS0FBSyxFQUFFLGdCQUFnQixFQUFFO0lBQzlELEtBQUssRUFBRSxTQUFTO0lBQ2hCLFNBQVM7SUFDVCxhQUFhO0NBQ2QsQ0FBQyxDQUFDO0FBQ0gsU0FBUztBQUVULEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjZm4gPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtY2xvdWRmb3JtYXRpb24nKTtcbmltcG9ydCBjb2RlY29tbWl0ID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWNvZGVjb21taXQnKTtcbmltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcbmltcG9ydCBjb2RlcGlwZWxpbmUgPSByZXF1aXJlKCcuLi9saWInKTtcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdhd3MtY2RrLWNvZGVwaXBlbGluZS1jbG91ZGZvcm1hdGlvbicpO1xuXG4vLy8gIXNob3dcbmNvbnN0IHBpcGVsaW5lID0gbmV3IGNvZGVwaXBlbGluZS5QaXBlbGluZShzdGFjaywgJ1BpcGVsaW5lJyk7XG5cbi8vIFNvdXJjZSBzdGFnZTogcmVhZCBmcm9tIHJlcG9zaXRvcnlcbmNvbnN0IHJlcG8gPSBuZXcgY29kZWNvbW1pdC5SZXBvc2l0b3J5KHN0YWNrLCAnVGVtcGxhdGVSZXBvJywge1xuICByZXBvc2l0b3J5TmFtZTogJ3RlbXBsYXRlLXJlcG8nXG59KTtcbmNvbnN0IHNvdXJjZVN0YWdlID0gbmV3IGNvZGVwaXBlbGluZS5TdGFnZShwaXBlbGluZSwgJ1NvdXJjZScsIHsgcGlwZWxpbmUgfSk7XG5jb25zdCBzb3VyY2UgPSBuZXcgY29kZWNvbW1pdC5QaXBlbGluZVNvdXJjZUFjdGlvbihzdGFjaywgJ1NvdXJjZScsIHtcbiAgc3RhZ2U6IHNvdXJjZVN0YWdlLFxuICByZXBvc2l0b3J5OiByZXBvLFxuICBvdXRwdXRBcnRpZmFjdE5hbWU6ICdTb3VyY2VBcnRpZmFjdCcsXG4gIHBvbGxGb3JTb3VyY2VDaGFuZ2VzOiB0cnVlLFxufSk7XG5cbi8vIERlcGxveW1lbnQgc3RhZ2U6IGNyZWF0ZSBhbmQgZGVwbG95IGNoYW5nZXNldCB3aXRoIG1hbnVhbCBhcHByb3ZhbFxuY29uc3QgcHJvZFN0YWdlID0gbmV3IGNvZGVwaXBlbGluZS5TdGFnZShwaXBlbGluZSwgJ0RlcGxveScsIHsgcGlwZWxpbmUgfSk7XG5jb25zdCBzdGFja05hbWUgPSAnT3VyU3RhY2snO1xuY29uc3QgY2hhbmdlU2V0TmFtZSA9ICdTdGFnZWRDaGFuZ2VTZXQnO1xuXG5uZXcgY2ZuLlBpcGVsaW5lQ3JlYXRlUmVwbGFjZUNoYW5nZVNldEFjdGlvbihwcm9kU3RhZ2UsICdQcmVwYXJlQ2hhbmdlcycsIHtcbiAgc3RhZ2U6IHByb2RTdGFnZSxcbiAgc3RhY2tOYW1lLFxuICBjaGFuZ2VTZXROYW1lLFxuICBhZG1pblBlcm1pc3Npb25zOiB0cnVlLFxuICB0ZW1wbGF0ZVBhdGg6IHNvdXJjZS5vdXRwdXRBcnRpZmFjdC5hdFBhdGgoJ3RlbXBsYXRlLnlhbWwnKSxcbn0pO1xuXG5uZXcgY29kZXBpcGVsaW5lLk1hbnVhbEFwcHJvdmFsQWN0aW9uKHN0YWNrLCAnQXBwcm92ZUNoYW5nZXMnLCB7XG4gIHN0YWdlOiBwcm9kU3RhZ2UsXG59KTtcblxubmV3IGNmbi5QaXBlbGluZUV4ZWN1dGVDaGFuZ2VTZXRBY3Rpb24oc3RhY2ssICdFeGVjdXRlQ2hhbmdlcycsIHtcbiAgc3RhZ2U6IHByb2RTdGFnZSxcbiAgc3RhY2tOYW1lLFxuICBjaGFuZ2VTZXROYW1lLFxufSk7XG4vLy8gIWhpZGVcblxuYXBwLnJ1bigpO1xuIl19